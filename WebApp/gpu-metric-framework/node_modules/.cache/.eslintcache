[{"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\index.js":"1","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\App.js":"2","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Card.js":"3","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\ExecutionView.js":"4","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Navbar.js":"5","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\StaticCheckbox.js":"6","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\DynamicCheckbox.js":"7","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\Dropdown.js":"8","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\TextInput.js":"9","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Apps\\AppComponent.js":"10","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\index.js":"11","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\App.js":"12","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\ExecutionView.js":"13","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Navbar.js":"14","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\DynamicCheckbox.js":"15","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\StaticCheckbox.js":"16","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\TextInput.js":"17","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Card.js":"18","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\Dropdown.js":"19","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Apps\\AppComponent.js":"20","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\PopUp.js":"21","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\MainView\\MainView.js":"22","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Monitoring\\MonitoringView.js":"23","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Monitoring\\MyChart.js":"24","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Monitoring\\ExecutionTime.js":"25","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\index.js":"26","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\App.js":"27","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\MainView\\MainView.js":"28","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Navbar.js":"29","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\ExecutionView.js":"30","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Monitoring\\MonitoringView.js":"31","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Card.js":"32","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\Dropdown.js":"33","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\StaticCheckbox.js":"34","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Monitoring\\MyChart.js":"35","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Monitoring\\ExecutionTime.js":"36","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\PopUp.js":"37","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Apps\\AppComponent.js":"38","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\DynamicCheckbox.js":"39","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Monitoring\\ConsoleView.js":"40"},{"size":216,"mtime":1695751156443,"results":"41","hashOfConfig":"42"},{"size":733,"mtime":1698272315918,"results":"43","hashOfConfig":"42"},{"size":187,"mtime":1695751156438,"results":"44","hashOfConfig":"42"},{"size":4385,"mtime":1698269703543,"results":"45","hashOfConfig":"42"},{"size":264,"mtime":1698200175697,"results":"46","hashOfConfig":"42"},{"size":1621,"mtime":1695794812252,"results":"47","hashOfConfig":"42"},{"size":2873,"mtime":1698217616423,"results":"48","hashOfConfig":"42"},{"size":2840,"mtime":1698272621129,"results":"49","hashOfConfig":"42"},{"size":1569,"mtime":1698217997513,"results":"50","hashOfConfig":"42"},{"size":7101,"mtime":1698217720803,"results":"51","hashOfConfig":"42"},{"size":216,"mtime":1698357842807,"results":"52","hashOfConfig":"53"},{"size":912,"mtime":1699746114901,"results":"54","hashOfConfig":"53"},{"size":5931,"mtime":1699741599805,"results":"55","hashOfConfig":"53"},{"size":264,"mtime":1698357842807,"results":"56","hashOfConfig":"53"},{"size":2967,"mtime":1698359107714,"results":"57","hashOfConfig":"53"},{"size":1735,"mtime":1698359093396,"results":"58","hashOfConfig":"53"},{"size":1569,"mtime":1698357842805,"results":"59","hashOfConfig":"53"},{"size":187,"mtime":1698357842805,"results":"60","hashOfConfig":"53"},{"size":2969,"mtime":1698359078447,"results":"61","hashOfConfig":"53"},{"size":9616,"mtime":1699322607356,"results":"62","hashOfConfig":"53"},{"size":540,"mtime":1698369854213,"results":"63","hashOfConfig":"53"},{"size":2104,"mtime":1699746120452,"results":"64","hashOfConfig":"53"},{"size":10423,"mtime":1699832690668,"results":"65","hashOfConfig":"53"},{"size":3605,"mtime":1699722556288,"results":"66","hashOfConfig":"53"},{"size":1838,"mtime":1699145122123,"results":"67","hashOfConfig":"53"},{"size":216,"mtime":1711131298473,"results":"68","hashOfConfig":"69"},{"size":946,"mtime":1711582340114,"results":"70","hashOfConfig":"69"},{"size":2167,"mtime":1711556557358,"results":"71","hashOfConfig":"69"},{"size":264,"mtime":1711131298471,"results":"72","hashOfConfig":"69"},{"size":6000,"mtime":1711454373324,"results":"73","hashOfConfig":"69"},{"size":10641,"mtime":1711556817158,"results":"74","hashOfConfig":"69"},{"size":187,"mtime":1711131298470,"results":"75","hashOfConfig":"69"},{"size":3472,"mtime":1711456486116,"results":"76","hashOfConfig":"69"},{"size":1735,"mtime":1711131298467,"results":"77","hashOfConfig":"69"},{"size":3792,"mtime":1711131298462,"results":"78","hashOfConfig":"69"},{"size":1838,"mtime":1711131298459,"results":"79","hashOfConfig":"69"},{"size":540,"mtime":1711131298471,"results":"80","hashOfConfig":"69"},{"size":10514,"mtime":1711456441997,"results":"81","hashOfConfig":"69"},{"size":2975,"mtime":1711453370951,"results":"82","hashOfConfig":"69"},{"size":1642,"mtime":1711587031764,"results":"83","hashOfConfig":"69"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1f1td20",{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"118"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},"1fadv2y",{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"122"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"122"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"122"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},"r2eb8",{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"171"},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"171"},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"171"},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"171"},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"171"},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"171"},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\index.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\App.js",[],[],["219"],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Card.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\ExecutionView.js",["220","221","222","223","224"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Navbar.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\StaticCheckbox.js",["225"],[],"import './StaticCheckbox.css';\r\nimport React, {useState, useEffect} from 'react';\r\n\r\nconst StaticCheckbox = (props) =>{\r\n\r\n    const [executionFlag, setExecutionFlag] = useState(false);\r\n\r\n    const handleCheckboxChange = (event) =>{\r\n        const id = event.target.id;\r\n\r\n        // If the clicked checkbox is already checked, uncheck it\r\n        if (id === executionFlag) {\r\n        setExecutionFlag(null);\r\n        } else {\r\n        setExecutionFlag(id); // Otherwise, check the clicked checkbox\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        // This code will run after the state has been updated\r\n        const executionType={ \r\n          execType: executionFlag\r\n        };\r\n        props.onExecuteEvent(executionType);  \r\n        }, [executionFlag]);\r\n\r\n    return(\r\n        <div>\r\n            <div className='checkbox-margin'>\r\n                <label  className='form-control'>\r\n                    <input\r\n                        id='simult'\r\n                        type='checkbox'\r\n                        checked= {executionFlag === 'simult'}\r\n                        onChange={handleCheckboxChange}\r\n                    />Simultaneous\r\n                </label> \r\n                <label className='form-control'>\r\n                    <input\r\n                        id='not-simult'\r\n                        type='checkbox'\r\n                        checked={executionFlag === 'not-simult'}\r\n                        onChange={handleCheckboxChange}\r\n                    />Not Simultaneous\r\n                </label> \r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default StaticCheckbox;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\DynamicCheckbox.js",["226","227"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\Dropdown.js",["228","229","230","231","232","233"],[],"import React, { useState, useEffect } from 'react';\r\n\r\nimport './Dropdown.css';\r\n\r\nconst Dropdown = (props) => {\r\n\r\n    const [selectedNumber, setSelectedNumber] = useState('');\r\n    const [error, setError] = useState(null);\r\n    const [frequenciesOptions, setFrequenciesOptions] = useState('');\r\n    const [selectedFrequency, setSelectedFrequency] = useState('');\r\n\r\n    const handleSelectChange = (e) => {\r\n      setSelectedNumber(e.target.value);\r\n    };\r\n  \r\n    const numbers = Array.from({ length: 15 }, (_, i) => i + 1);\r\n\r\n\r\n    useEffect(() => {\r\n      if (props.injected === true) {\r\n        setError(null);\r\n        fetch(props.frequenciesURL, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'ngrok-skip-browser-warning': '1',\r\n          },\r\n        })\r\n          .then((response) => {\r\n            if (!response.ok) {\r\n              throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n            return response.json();\r\n          })\r\n          .then((data) => {\r\n            setFrequenciesOptions(data);\r\n          })\r\n          .catch((error) => {\r\n            setError(error.message);\r\n          });\r\n      }\r\n    }, [props.injected, props.frequenciesURL, props.frequenciesOptions]);\r\n\r\n    \r\n    useEffect(() => {\r\n      // This code will run after the state has been updated\r\n      if(props.injected== false){\r\n        const execNum={ \r\n          execNum: selectedNumber\r\n        };\r\n        props.onExecuteEvent(execNum); \r\n      }\r\n      \r\n      if(props.injected== true){\r\n        const freq={ \r\n          freq:selectedFrequency\r\n        };\r\n        props.onExecuteEvent(freq); \r\n      }\r\n\r\n      }, [selectedFrequency,selectedNumber]);\r\n\r\n  \r\n    return (\r\n      <div>\r\n        {(props.injected == false) && (\r\n          <div>\r\n          <select className='select' onChange={handleSelectChange} value={selectedNumber}>\r\n            <option value=\"\">Select a number</option>\r\n            {numbers.map((number) => (\r\n              <option key={number} value={number}>\r\n                {number}\r\n              </option>\r\n            ))}\r\n          </select>\r\n\r\n          </div>\r\n        )}\r\n\r\n        {(props.injected == true) && frequenciesOptions && (          \r\n            <div>\r\n            <select\r\n              className=\"select\"\r\n              onChange={(e) => setSelectedFrequency(e.target.value)}\r\n              value={selectedFrequency}\r\n            >\r\n              <option value=\"\">Select a frequency</option>\r\n              {frequenciesOptions.map((frequency) => (\r\n                <option key={frequency} value={frequency}>\r\n                  {frequency}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        )}\r\n        \r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Dropdown;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\TextInput.js",["234","235","236","237","238"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Apps\\AppComponent.js",["239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254"],[],"import React, { useState, useEffect  } from 'react';\r\nimport DynamicCheckbox from '../Request-Execution/DynamicCheckbox';\r\nimport './AppComponents.css';\r\n\r\nconst AppComponent = (props) => {\r\n  \r\n    const workloads = 'workloads';\r\n    let userData={}\r\n\r\n    const [isChecked, setIsChecked] = useState(false);\r\n\r\n    //Constants to save inputs values\r\n    const [cfd_threads, set_cfd_Threads] = useState('');\r\n    const [niter, setNiter] = useState('');\r\n    const [lambda, setLambda] = useState('');\r\n    const [nc, setNc] = useState('');\r\n    const [nr, setNr] = useState('');\r\n    const [width, setWidth] = useState('');\r\n    const [height, setHeight] = useState('');\r\n    const [nfr, setNfr] = useState('');\r\n    const [np, setNp] = useState('');\r\n    const [matrixSize, setMatrixSize] = useState('');\r\n    const [lud_threads, set_lud_threads] = useState('');\r\n    const [boxes, setBoxes] = useState('');\r\n\r\n    const executeHandler = ( enteredUserData ) => {\r\n        userData = {\r\n            ...userData, // Keep the existing data in userData\r\n            ...enteredUserData, // Add the data from enteredUserData\r\n        };\r\n        if (props.appName == 'CFD'){\r\n            const cfdApp={\r\n                cfd_workloads : userData.cfd_workload\r\n            }\r\n            props.onExecuteEvent(cfdApp);\r\n        }\r\n        else if (props.appName == 'BFS'){\r\n            const bfs = {\r\n                bfs_name:'BFS',\r\n                bfs_workloads : userData.bfs_workload\r\n            }\r\n            props.onExecuteEvent(bfs);\r\n        }\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        props.updateData(event.target.value);\r\n    }\r\n\r\n    const handleCheckboxChange = () => {\r\n        setIsChecked(prevState => !prevState); // Invierte el valor de isChecked\r\n    };\r\n\r\n    //Sending data the the parent\r\n    useEffect(() => {\r\n    // This code will run after the state has been updated\r\n\r\n\r\n    if(props.appName=='CFD'){\r\n        const cfd={ \r\n        cfd_name: 'CFD',\r\n        cfd_threads: cfd_threads\r\n        };\r\n        props.onExecuteEvent(cfd); \r\n    }\r\n\r\n    else if(props.appName=='LavaMD'){\r\n        const lavaMD={ \r\n        lava_name: 'LavaMD',\r\n        lava_workloads:' -boxes1d '+ boxes\r\n        };\r\n        props.onExecuteEvent(lavaMD); \r\n    }\r\n\r\n    else if(props.appName=='Particle Filter'){\r\n        const particle={ \r\n        filter_name: 'Particle Filter',\r\n        filter_workloads: ' -x ' + width + ' -y ' + height + ' -z ' + nfr + ' -np ' + np\r\n        };\r\n        props.onExecuteEvent(particle); \r\n    }\r\n\r\n    else if(props.appName=='Srad'){\r\n        const srad={ \r\n        srad_name: 'Srad',\r\n        srad_workloads: String(niter) + ' ' + String(lambda) + ' ' +  String(nr)+ ' ' + String(nc)\r\n        };\r\n        props.onExecuteEvent(srad); \r\n    }\r\n\r\n    else if(props.appName=='Lud'){\r\n        const lud={ \r\n        lud_name: 'Lud',\r\n        lud_workloads: ' -s ' + matrixSize ,\r\n        lud_threads: lud_threads\r\n        };\r\n        props.onExecuteEvent(lud); \r\n    } \r\n    }, [userData, cfd_threads, niter, lambda, nc, nr, width, height, nfr, np, matrixSize, lud_threads, boxes]);\r\n    \r\n\r\n\r\n  return (\r\n    <div className='app-style'>\r\n        <label>\r\n      <input type=\"checkbox\" onChange={handleCheckboxChange}/>{props.appName}\r\n      </label>\r\n      <div className='text-style'>\r\n        \r\n        { isChecked && (props.appName == 'BFS') && (\r\n            <>\r\n            <label>Workloads files:</label>\r\n            <DynamicCheckbox itemsURL={props.itemsURL} appName={'BFS'} onExecuteEvent = {executeHandler}/>\r\n            </>\r\n        )}\r\n\r\n        { isChecked && (props.appName == 'CFD') && (\r\n        <>\r\n            <label>Workloads files:</label>\r\n            <DynamicCheckbox itemsURL={props.itemsURL} appName={'CFD'} onExecuteEvent = {executeHandler}/>\r\n            <div >\r\n                <label>Threads per block</label>\r\n                <input type='number' className='input-style' value={cfd_threads} onChange={e => set_cfd_Threads(e.target.value)}></input>\r\n            </div>\r\n        </>\r\n        )}\r\n\r\n        {isChecked && (props.appName == 'LavaMD') && (\r\n        <>\r\n            <div>\r\n                <label>Number of boxes</label>\r\n                <input type='number' className='input-style' value={boxes} onChange={e => setBoxes(e.target.value)}></input>\r\n            </div>\r\n        </>\r\n        )}\r\n\r\n        {isChecked && (props.appName == 'Particle Filter') && (\r\n            <>\r\n                <div>\r\n                    <label>Width</label>\r\n                    <input type='number' className='input-style' value={width} onChange={e => setWidth(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Height</label>\r\n                    <input type='number' className='input-style' value={height} onChange={e => setHeight(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of frames</label>\r\n                    <input type='number' className='input-style' value={nfr} onChange={e => setNfr(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of particles</label>\r\n                    <input type='number' className='input-style' value={np} onChange={e => setNp(e.target.value)}></input>\r\n                </div>\r\n            </>\r\n        )}\r\n\r\n        {isChecked && (props.appName == 'Srad') && (\r\n            <>\r\n                <div>\r\n                    <label>Algorithm iterations in the image</label>\r\n                    <input type='number' className='input-style' value={niter} onChange={e => setNiter(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Amount of diffusion</label>\r\n                    <input type='number' step=\"0.01\" className='input-style' value={lambda} onChange={e => setLambda(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of rows</label>\r\n                    <input type='number' className='input-style' value={nr} onChange={e => setNr(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of columns</label>\r\n                    <input type='number' className='input-style' value={nc} onChange={e => setNc(e.target.value)}></input>\r\n                </div>\r\n            </>\r\n        )}\r\n\r\n\r\n        {isChecked && (props.appName == 'Lud') && (\r\n            <>\r\n                <div>\r\n                    <label>Matrix size</label>\r\n                    <input type='number' className='input-style' value={matrixSize} onChange={e => setMatrixSize(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Threads per block</label>\r\n                    <input type='number' className='input-style' value={lud_threads} onChange={e => set_lud_threads(e.target.value)}></input>\r\n                </div>\r\n            </>\r\n        )}\r\n      </div>\r\n      \r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppComponent;\r\n",["255"],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\index.js",[],[],["256"],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\App.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\ExecutionView.js",["257"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Navbar.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\DynamicCheckbox.js",["258","259","260"],[],"import './DynamicCheckbox.css';\r\nimport React, { useState, useEffect  } from 'react';\r\nimport Card from '../UI/Card';\r\n\r\nfunction DynamicCheckbox(props) {\r\n\r\n  const [selectedOption, setSelectedOption] = useState([]);\r\n  const [appsOptions, setAppsOptions] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  //Function to fetch data from the api\r\n  //The item will depend on the props, it could be for the workloads or the apps data.\r\n  useEffect(() => {\r\n    setError(null);\r\n    fetch(props.itemsURL ,{\r\n      method: 'GET',\r\n      headers: {\r\n          'Content-Type': 'application/json',\r\n          'ngrok-skip-browser-warning': '1'\r\n      }\r\n  })\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n      return response.json();\r\n    })\r\n    .then((data) => {\r\n      setAppsOptions(data.itemNames);\r\n    })\r\n    .catch((error) => {\r\n      setError(error.message);\r\n    });\r\n  }, []);\r\n  \r\n\r\n  //This function retrieves the data to the parent(ExecutionView) throught the function props.onExecuteEvent\r\n  //This function gets triggered every time after the page renders\r\n  useEffect(() => {\r\n    // This code will run after the render\r\n\r\n    if(props.refresh == true){\r\n      setSelectedOption(null);\r\n    }\r\n    \r\n    if (props.appName === 'BFS' && selectedOption !== null) {\r\n      const bfs_workload = {\r\n        bfs_workload: selectedOption\r\n      };\r\n      props.onExecuteEvent(bfs_workload);\r\n    } else if (props.appName === 'CFD' && selectedOption !== null) {\r\n      const cfd_workload = {\r\n        cfd_workload: selectedOption\r\n      };\r\n      props.onExecuteEvent(cfd_workload);\r\n    }\r\n  }, [props.refresh ,selectedOption]);\r\n\r\n    \r\n  // Function to update the selected option\r\n  const toggleOption = (option) => {\r\n    if (selectedOption === option) {\r\n      // Deselect the option if it's already selected\r\n      setSelectedOption(null);\r\n    } else {\r\n      // Select the new option\r\n      setSelectedOption(option);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card className=\"dropdown\">\r\n        <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n          {/* This validation -> appsOptions && is used to make sure that the map is executed util the variable appsOptions has been fetched.\r\n              This is because fetch is an async function.*/}\r\n          {appsOptions && appsOptions.map((option) => (\r\n            <label className=\"dropdown-item\" key={option}>\r\n              <input\r\n                type=\"checkbox\"\r\n                className='options-style'\r\n                checked={selectedOption === option}\r\n                onChange={() => toggleOption(option)}\r\n              />{\" \"}\r\n              {option}\r\n            </label>\r\n          ))}\r\n        </div>\r\n      </Card>\r\n      {error != null && <label className='warning'>Error: {error}</label>}\r\n      \r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DynamicCheckbox;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\StaticCheckbox.js",["261"],[],"import './StaticCheckbox.css';\r\nimport React, {useState, useEffect} from 'react';\r\n\r\nconst StaticCheckbox = (props) =>{\r\n\r\n    const [executionFlag, setExecutionFlag] = useState(false);\r\n\r\n    const handleCheckboxChange = (event) =>{\r\n        const id = event.target.id;\r\n\r\n        // If the clicked checkbox is already checked, uncheck it\r\n        if (id === executionFlag) {\r\n        setExecutionFlag(null);\r\n        } else {\r\n        setExecutionFlag(id); // Otherwise, check the clicked checkbox\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        // This code will run after the state has been updated\r\n\r\n        if( props.refresh === true){\r\n            setExecutionFlag(false);\r\n        }\r\n        \r\n        const executionType={ \r\n          execType: executionFlag\r\n        };\r\n        props.onExecuteEvent(executionType);  \r\n        }, [props.refresh ,executionFlag]);\r\n\r\n    return(\r\n        <div>\r\n            <div className='checkbox-margin'>\r\n                <label  className='form-control'>\r\n                    <input\r\n                        id='simult'\r\n                        type='checkbox'\r\n                        checked= {executionFlag === 'simult'}\r\n                        onChange={handleCheckboxChange}\r\n                    />Simultaneous\r\n                </label> \r\n                <label className='form-control'>\r\n                    <input\r\n                        id='not-simult'\r\n                        type='checkbox'\r\n                        checked={executionFlag === 'not-simult'}\r\n                        onChange={handleCheckboxChange}\r\n                    />Not Simultaneous\r\n                </label> \r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default StaticCheckbox;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\TextInput.js",["262","263","264","265","266"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Card.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\Dropdown.js",["267","268","269","270","271","272"],[],"import React, { useState, useEffect } from 'react';\r\n\r\nimport './Dropdown.css';\r\n\r\nconst Dropdown = (props) => {\r\n\r\n    const [selectedNumber, setSelectedNumber] = useState('');\r\n    const [error, setError] = useState(null);\r\n    const [frequenciesOptions, setFrequenciesOptions] = useState('');\r\n    const [selectedFrequency, setSelectedFrequency] = useState('');\r\n\r\n    const handleSelectChange = (e) => {\r\n      setSelectedNumber(e.target.value);\r\n    };\r\n  \r\n    const numbers = Array.from({ length: 15 }, (_, i) => i + 1);\r\n\r\n\r\n    useEffect(() => {\r\n      if (props.injected === true) {\r\n        setError(null);\r\n        fetch(props.frequenciesURL, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'ngrok-skip-browser-warning': '1',\r\n          },\r\n        })\r\n          .then((response) => {\r\n            if (!response.ok) {\r\n              throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n            return response.json();\r\n          })\r\n          .then((data) => {\r\n            setFrequenciesOptions(data);\r\n          })\r\n          .catch((error) => {\r\n            setError(error.message);\r\n          });\r\n      }\r\n    }, [props.injected, props.frequenciesURL, props.frequenciesOptions]);\r\n\r\n    \r\n    useEffect(() => {\r\n      // This code will run after the state has been updated\r\n      if( props.refresh === true){\r\n        setSelectedNumber('');\r\n        setSelectedFrequency('');\r\n      }\r\n\r\n      if(props.injected== false){\r\n        const execNum={ \r\n          execNum: selectedNumber\r\n        };\r\n        props.onExecuteEvent(execNum); \r\n      }\r\n      \r\n      if(props.injected== true){\r\n        const freq={ \r\n          freq:selectedFrequency\r\n        };\r\n        props.onExecuteEvent(freq); \r\n      }\r\n\r\n      }, [props.refresh ,selectedFrequency,selectedNumber]);\r\n\r\n  \r\n    return (\r\n      <div>\r\n        {(props.injected == false) && (\r\n          <div>\r\n          <select className='select' onChange={handleSelectChange} value={selectedNumber}>\r\n            <option value=\"\">Select a number</option>\r\n            {numbers.map((number) => (\r\n              <option key={number} value={number}>\r\n                {number}\r\n              </option>\r\n            ))}\r\n          </select>\r\n\r\n          </div>\r\n        )}\r\n\r\n        {(props.injected == true) && frequenciesOptions && (          \r\n            <div>\r\n            <select\r\n              className=\"select\"\r\n              onChange={(e) => setSelectedFrequency(e.target.value)}\r\n              value={selectedFrequency}\r\n            >\r\n              <option value=\"\">Select a frequency</option>\r\n              {frequenciesOptions.map((frequency) => (\r\n                <option key={frequency} value={frequency}>\r\n                  {frequency}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        )}\r\n        \r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Dropdown;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Apps\\AppComponent.js",["273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\PopUp.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\MainView\\MainView.js",["304","305","306","307"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Monitoring\\MonitoringView.js",["308","309","310","311","312","313","314","315"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Monitoring\\MyChart.js",["316","317","318","319"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Monitoring\\ExecutionTime.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\index.js",[],[],["320"],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\App.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\MainView\\MainView.js",["321","322","323","324"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Navbar.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\ExecutionView.js",["325"],[],"import React, {useState, useEffect } from 'react';\r\n\r\nimport './ExecutionView.css';\r\nimport Card from '../UI/Card';\r\nimport StaticCheckbox from './StaticCheckbox';\r\nimport Dropdown from './Dropdown';\r\nimport AppComponent from '../Apps/AppComponent';\r\nimport Popup from '../UI/PopUp';\r\n\r\nfunction ExecutionView(props) { \r\n    const workloads = 'workloads';\r\n    let userData = {};\r\n\r\n    const [refreshFlag, setRefreshFlag] = useState(false);\r\n    const [isPopupOpen, setPopupOpen] = useState(false);\r\n    const [MonitoringFlag, setMonitoringFlag] = useState(false);\r\n\r\n    const executeHandler = ( enteredUserData ) => {\r\n        userData = {\r\n            ...userData, // Keep the existing data in userData\r\n            ...enteredUserData, // Add the data from enteredUserData\r\n          };\r\n         \r\n    }\r\n\r\n    async function requestExecution() {\r\n        setRefreshFlag(true);\r\n        setRefreshFlag(false);\r\n        setMonitoringFlag(true);\r\n        props.setExecState('InProgress');\r\n        props.setExecProperties([userData['execType'], userData['execNum']]);\r\n        try {\r\n          const response = await fetch(props.executionURL, {\r\n            method: 'POST',\r\n            body: JSON.stringify(userData),\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          });\r\n      \r\n          if (!response.ok) {\r\n            // Handle HTTP errors\r\n            props.setExecState('Failed');\r\n            throw new Error(`HTTP error! Status: ${response.status}`);\r\n          }\r\n      \r\n          const data = await response.json();\r\n          props.setExecState('Succed');\r\n      \r\n          console.log(data);\r\n      \r\n        } catch (error) {\r\n            props.setExecState('Failed');\r\n            console.error('Error:', error.message);\r\n      \r\n        }\r\n      }\r\n      \r\n\r\n\r\n    const closePopup = () => {\r\n        setPopupOpen(false);\r\n        setMonitoringFlag(true);\r\n      };\r\n\r\n      useEffect(() => {\r\n        props.setView(MonitoringFlag);\r\n    }, [MonitoringFlag]);\r\n\r\n\r\n\r\n    return(\r\n        <div >\r\n            <div className='popup'>\r\n                <Popup isOpen={isPopupOpen} onClose={closePopup}/>\r\n            </div>\r\n            <div className='execution-container'>\r\n                <Card className='left-container'>\r\n                    <label className='label'>Select the applications</label>\r\n                    {/* <div>\r\n                        \r\n                        <DynamicCheckbox itemsURL={props.appsURL} field={apps} onExecuteEvent = {executeHandler} ></DynamicCheckbox>\r\n                    </div>\r\n                    <div>\r\n                        <label className='label'>Select the workloads</label>\r\n                        <DynamicCheckbox itemsURL={props.workloadsURL} field={workloads} onExecuteEvent = {executeHandler}></DynamicCheckbox>\r\n                    </div> */}\r\n                    <div>\r\n                        <AppComponent refresh={refreshFlag} itemsURL={props.bfs_workloadsURL} field={workloads} onExecuteEvent = {executeHandler} appName  ={'BFS'}/>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <AppComponent refresh={refreshFlag} itemsURL={props.gauss_workloadsURL} field={workloads} onExecuteEvent = {executeHandler} appName  ={'Gauss'}/>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <AppComponent refresh={refreshFlag} itemsURL={props.workloadsURL} field={workloads} onExecuteEvent = {executeHandler} appName  ={'Srad'}/>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <AppComponent refresh={refreshFlag} itemsURL={props.workloadsURL} field={workloads} frequenciesURL={props.frequenciesURL} onExecuteEvent = {executeHandler} appName  ={'Wicked'}/>\r\n                    </div>\r\n\r\n                \r\n                    \r\n                </Card>\r\n                <Card className='right-container'>\r\n\r\n                    <div className='margins'>\r\n                        <AppComponent refresh={refreshFlag} itemsURL={props.workloadsURL} field={workloads} onExecuteEvent = {executeHandler} appName  ={'LavaMD'}/>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <AppComponent refresh={refreshFlag} itemsURL={props.workloadsURL} field={workloads} onExecuteEvent = {executeHandler} appName  ={'Lud'}/>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <AppComponent refresh={refreshFlag} itemsURL={props.workloadsURL} field={workloads} onExecuteEvent = {executeHandler} appName  ={'External'}/>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <div>\r\n                            <label className='label'>Select the execution mode</label>\r\n                        </div>\r\n                        <StaticCheckbox refresh={refreshFlag} onExecuteEvent = {executeHandler}></StaticCheckbox>\r\n                    </div>\r\n\r\n                    <div>\r\n                    <label className='label'>Executions number</label>\r\n                    <Dropdown refresh={refreshFlag} injected={false} wickedApp={false} onExecuteEvent = {executeHandler}></Dropdown>\r\n                    </div>\r\n\r\n                    <div>\r\n                    <label className='label'>Select the frequencies</label>\r\n                    <Dropdown refresh={refreshFlag} injected={true} wickedApp={false} frequenciesURL={props.frequenciesURL} onExecuteEvent = {executeHandler}></Dropdown>\r\n                    </div>\r\n                    \r\n                    {/*<div>\r\n                        <label className='label'>Select the GPU frequency</label>\r\n                        <TextInput field={freq} onExecuteEvent = {executeHandler} label={freqString}></TextInput>\r\n                    </div>\r\n                */}\r\n                    <button className='button' onClick={requestExecution}>Execute</button>\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExecutionView;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Monitoring\\MonitoringView.js",["326","327","328","329","330","331","332","333"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Card.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\Dropdown.js",["334","335","336","337","338","339","340","341"],[],"import React, { useState, useEffect } from 'react';\r\n\r\nimport './Dropdown.css';\r\n\r\nconst Dropdown = (props) => {\r\n\r\n    const [selectedNumber, setSelectedNumber] = useState('');\r\n    const [error, setError] = useState(null);\r\n    const [frequenciesOptions, setFrequenciesOptions] = useState('');\r\n    const [selectedFrequency, setSelectedFrequency] = useState('');\r\n\r\n    const handleSelectChange = (e) => {\r\n      setSelectedNumber(e.target.value);\r\n    };\r\n  \r\n    const numbers = Array.from({ length: 1000 }, (_, i) => i);\r\n\r\n\r\n    useEffect(() => {\r\n      if (props.injected === true) {\r\n        setError(null);\r\n        fetch(props.frequenciesURL, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'ngrok-skip-browser-warning': '1',\r\n          },\r\n        })\r\n          .then((response) => {\r\n            if (!response.ok) {\r\n              throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n            return response.json();\r\n          })\r\n          .then((data) => {\r\n            setFrequenciesOptions(data);\r\n          })\r\n          .catch((error) => {\r\n            setError(error.message);\r\n          });\r\n      }\r\n    }, [props.injected, props.frequenciesURL, props.frequenciesOptions]);\r\n\r\n    \r\n    useEffect(() => {\r\n      // This code will run after the state has been updated\r\n      if( props.refresh === true){\r\n        setSelectedNumber('');\r\n        setSelectedFrequency('');\r\n      }\r\n\r\n      if(props.injected== false){\r\n        const execNum={ \r\n          execNum: selectedNumber\r\n        };\r\n        props.onExecuteEvent(execNum); \r\n      }\r\n      \r\n      if(props.injected== true){\r\n        \r\n        if(props.wickedApp == true){\r\n          \r\n          if(props.freq_boundary == 'min'){\r\n            const wicked_minfreq={\r\n              wicked_minfreq: selectedFrequency\r\n            }\r\n            props.onExecuteEvent(wicked_minfreq);\r\n          }\r\n          else{\r\n            const wicked_maxfreq={\r\n              wicked_maxfreq: selectedFrequency\r\n          }\r\n          props.onExecuteEvent(wicked_maxfreq);\r\n          }\r\n        \r\n        }\r\n        else{\r\n          const freq={ \r\n            freq:selectedFrequency\r\n          };\r\n  \r\n          props.onExecuteEvent(freq); \r\n        }\r\n      }\r\n\r\n      }, [props.refresh ,selectedFrequency,selectedNumber]);\r\n\r\n  \r\n    return (\r\n      <div>\r\n        {(props.injected == false) && (\r\n          <div>\r\n          <select className='select' onChange={handleSelectChange} value={selectedNumber}>\r\n            <option value=\"\">Select a number</option>\r\n            {numbers.map((number) => (\r\n              <option key={number} value={number}>\r\n                {number}\r\n              </option>\r\n            ))}\r\n          </select>\r\n\r\n          </div>\r\n        )}\r\n\r\n        {(props.injected == true) && frequenciesOptions && (          \r\n            <div>\r\n            <select\r\n              className=\"select\"\r\n              onChange={(e) => setSelectedFrequency(e.target.value)}\r\n              value={selectedFrequency}\r\n            >\r\n              <option value=\"\">Select a frequency</option>\r\n              {frequenciesOptions.map((frequency) => (\r\n                <option key={frequency} value={frequency}>\r\n                  {frequency}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        )}\r\n        \r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Dropdown;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\StaticCheckbox.js",["342"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Monitoring\\MyChart.js",["343","344","345","346","347"],[],"import React, { useRef } from 'react';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\r\nimport { Line } from 'react-chartjs-2';\r\nimport './MyChart.css';\r\nimport image from '../../Images/download-icon.png';\r\n\r\n// Register the components required by ChartJS to draw the line chart\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst MyChart = (props) => {\r\n  const chartRef = useRef(null); // Define the chartRef\r\n\r\n  // Updated function to download the chart as an image\r\n  const downloadChart = () => {\r\n    const canvas = chartRef.current.canvas; // Assuming chartRef is attached to the canvas element\r\n\r\n    canvas.toBlob(function(blob) {\r\n      const url = URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = `${props.label[0]}_chart.png`; // Dynamic filename based on chart label\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link); // Remove the link when done\r\n      URL.revokeObjectURL(url); // Free up memory by releasing object URL\r\n    }, 'image/png');\r\n  };\r\n  let max_yAxis_value = 0;\r\n  let min_yAxis_value = 0;\r\n  let yAxis_Array = [];\r\n\r\n  if (props.label[0] == 'Temperature'){\r\n    max_yAxis_value = Math.max(...props.temperatureArray);\r\n    min_yAxis_value = Math.min(...props.temperatureArray);\r\n    yAxis_Array = props.temperatureArray;\r\n  }\r\n\r\n  if (props.label[0] == 'Power'){\r\n    max_yAxis_value = Math.max(...props.powerArray);\r\n    min_yAxis_value = Math.min(...props.powerArray);\r\n    yAxis_Array = props.powerArray;\r\n  }\r\n\r\n  if (props.label[0] == 'RAM'){\r\n    max_yAxis_value = Math.max(...props.ramArray);\r\n    min_yAxis_value = Math.min(...props.ramArray);\r\n    yAxis_Array = props.ramArray;\r\n  }\r\n\r\n  if (props.label[0] == 'Usage'){\r\n    max_yAxis_value = Math.max(...props.usageArray);\r\n    min_yAxis_value = Math.min(...props.usageArray);\r\n    yAxis_Array = props.usageArray;\r\n  }\r\n\r\n  \r\n  \r\n\r\n  const data = {\r\n    labels: props.execution_time.map(time => time.toFixed(2)),\r\n    datasets: [\r\n      {\r\n        label: props.label[0],\r\n        data: yAxis_Array,\r\n        fill: false,\r\n        borderColor: 'blue',\r\n        tension: 0.1,\r\n        pointRadius: 3,\r\n      }\r\n    ]\r\n  };\r\n\r\n  const options = {\r\n    scales: {\r\n      y: {\r\n        beginAtZero: false,\r\n        suggestedMin: min_yAxis_value - 1, // slightly lower than the minimum data value\r\n        suggestedMax: max_yAxis_value + 1, // slightly higher than the maximum data value\r\n        ticks: {\r\n          stepSize: 1 // Adjust step size to control how many ticks are shown\r\n        },\r\n        title: { // This is where you set the Y axis title\r\n          display: true,\r\n          text: props.label[1]\r\n        }\r\n      },\r\n      x: {\r\n        ticks: {\r\n          autoSkip: true,\r\n          maxTicksLimit: 20 // Adjust based on your data\r\n        },\r\n        title: { // This is where you set the X axis title\r\n          display: true,\r\n          text: 'Execution Time (s)'\r\n        }\r\n      }\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: props.label[0] + ' vs Execution Time',\r\n      }\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div >\r\n      <div className='button-cont'>\r\n        <button onClick={downloadChart}  style={{ padding: 0, border: 'none' }}>\r\n          <img src={image} alt=\"Button Image\" className='button-image'/>\r\n          </button>\r\n      </div>\r\n      <div className=\"chartContainer\">\r\n        <Line ref={chartRef} data={data} options={options} />\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyChart;\r\n","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Monitoring\\ExecutionTime.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\PopUp.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Apps\\AppComponent.js",["348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379"],[],"import React, { useState, useEffect  } from 'react';\r\nimport DynamicCheckbox from '../Request-Execution/DynamicCheckbox';\r\nimport './AppComponents.css';\r\nimport Dropdown from '../Request-Execution/Dropdown';\r\n\r\nconst AppComponent = (props) => {\r\n  \r\n    let userData={}\r\n\r\n    const [isChecked, setIsChecked] = useState(false);\r\n\r\n    //Constants to save inputs values\r\n    const [cfd_threads, set_cfd_Threads] = useState('');\r\n    const [niter, setNiter] = useState('');\r\n    const [lambda, setLambda] = useState('');\r\n    const [nc, setNc] = useState('');\r\n    const [nr, setNr] = useState('');\r\n    const [iterations, setiterations] = useState('');\r\n    const [freq_min, setfreq_min] = useState('');\r\n    const [freq_max, setfreq_max] = useState('');\r\n    const [delay, setdelay] = useState('');\r\n    const [matrixSize, setMatrixSize] = useState('');\r\n    const [lud_threads, set_lud_threads] = useState('');\r\n    const [boxes, setBoxes] = useState('');\r\n    const [externalName, setExternalName] = useState('');\r\n    const [externalWorkload, setExternalWorkload] = useState('');\r\n    const [make_isChecked, setMakeIsChecked] = useState(false);\r\n    const [make_input, setMakeInput] = useState('');\r\n\r\n    const executeHandler = ( enteredUserData ) => {\r\n        userData = {\r\n            ...userData, // Keep the existing data in userData\r\n            ...enteredUserData, // Add the data from enteredUserData\r\n        };\r\n        if (props.appName == 'Gauss'){\r\n            const gaussApp={\r\n                gauss_name: 'Gauss',\r\n                gauss_workloads : userData.gauss_workload\r\n            }\r\n            props.onExecuteEvent(gaussApp);\r\n        }\r\n        if (props.appName == 'BFS'){\r\n            const bfs = {\r\n                bfs_name:'BFS',\r\n                bfs_workloads : userData.bfs_workload\r\n            }\r\n            props.onExecuteEvent(bfs);\r\n        }\r\n\r\n        if(props.appName == 'Wicked'){\r\n            if(userData.wicked_minfreq != undefined){\r\n                setfreq_min(userData.wicked_minfreq);\r\n            }\r\n            if(userData.wicked_maxfreq != undefined){\r\n                setfreq_max(userData.wicked_maxfreq);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handle_makeCheckbox = () => {\r\n        setMakeIsChecked(prevState => !prevState); \r\n    };\r\n\r\n    const handleCheckboxChange = () => {\r\n        setIsChecked(prevState => !prevState); \r\n    };\r\n\r\n    //Sending data the the parent\r\n    useEffect(() => {\r\n    // This code will run after the state has been updated\r\n    if( props.refresh == true){\r\n        setIsChecked(false);\r\n        set_cfd_Threads('');\r\n        setNiter('');\r\n        setLambda('');\r\n        setNc('');\r\n        setNr('');\r\n        setiterations('');\r\n        setfreq_min('');\r\n        setfreq_max('');\r\n        setdelay('');\r\n        setMatrixSize('');\r\n        set_lud_threads('');\r\n        setBoxes('');\r\n        setExternalName('');\r\n        setExternalWorkload('');\r\n        setMakeIsChecked(false);\r\n        setMakeInput('');\r\n    }\r\n\r\n    /*if(props.appName=='Gauss'){\r\n        const cfd={ \r\n        gauss_name: 'Gauss'\r\n        };\r\n        if(gauss_threads!='') props.onExecuteEvent(cfd); \r\n    } */\r\n\r\n    else if(props.appName=='LavaMD'){\r\n        const lavaMD={ \r\n        lava_name: 'LavaMD',\r\n        lava_workloads:' -boxes1d '+ boxes\r\n        };\r\n\r\n        if(boxes!='') props.onExecuteEvent(lavaMD); \r\n    }\r\n\r\n    else if(props.appName=='Wicked'){\r\n        const wicked={ \r\n        wicked_name: 'Wicked',\r\n        wicked_workloads: ' ' + String(iterations) + ' ' +  String(freq_min) + ' ' + String(freq_max) + ' ' + String(delay)\r\n        };\r\n        if((iterations!='') && (freq_min!='') && (freq_max!='') && (delay!='')) props.onExecuteEvent(wicked); \r\n    }\r\n\r\n    else if(props.appName=='Srad'){\r\n        const srad={ \r\n        srad_name: 'Srad',\r\n        srad_workloads: String(niter) + ' ' + String(lambda) + ' ' +  String(nr)+ ' ' + String(nc)\r\n        };\r\n        if((niter!='') && (lambda!='') && (nr!='') && (nc!='')) props.onExecuteEvent(srad); \r\n    }\r\n\r\n    else if(props.appName=='Lud'){\r\n        const lud={ \r\n        lud_name: 'Lud',\r\n        lud_workloads: ' -s ' + matrixSize ,\r\n        lud_threads: lud_threads\r\n        };\r\n        if((matrixSize!='') && (lud_threads!='')) props.onExecuteEvent(lud); \r\n    }\r\n    \r\n    else if(props.appName=='External'){\r\n        const external_app={ \r\n        appName: externalName,\r\n        workload_input: externalWorkload,\r\n        makefile_flag: make_isChecked,\r\n        makefile_input : make_input\r\n        };\r\n        if((externalName!='') && (externalWorkload!='')) props.onExecuteEvent(external_app); \r\n    } \r\n    }, [props.refresh ,userData, cfd_threads, niter, lambda, nc, nr, iterations, freq_min, freq_max, delay,\r\n         matrixSize, lud_threads, boxes, externalName, externalWorkload]);\r\n    \r\n\r\n\r\n  return (\r\n    <div className='app-style'>\r\n      <label>\r\n      <input type=\"checkbox\" checked={isChecked} onChange={handleCheckboxChange}/>{props.appName}\r\n      </label>\r\n      <div className='text-style'>\r\n        \r\n        { isChecked && (props.appName == 'BFS') && (\r\n            <>\r\n            <label>Workloads files:</label>\r\n            <DynamicCheckbox itemsURL={props.itemsURL} appName={'BFS'} onExecuteEvent = {executeHandler}/>\r\n            </>\r\n        )}\r\n\r\n        { isChecked && (props.appName == 'Gauss') && (\r\n        <>\r\n            <label>Workloads files:</label>\r\n            <DynamicCheckbox itemsURL={props.itemsURL} appName={'Gauss'} onExecuteEvent = {executeHandler}/>\r\n            \r\n        </>\r\n        )}\r\n\r\n        {isChecked && (props.appName == 'LavaMD') && (\r\n        <>\r\n            <div>\r\n                <label>Number of boxes</label>\r\n                <input type='number' className='input-style' value={boxes} onChange={e => setBoxes(e.target.value)}></input>\r\n            </div>\r\n        </>\r\n        )}\r\n\r\n        {isChecked && (props.appName == 'Wicked') && (\r\n            <>\r\n                <div>\r\n                    <label>Iterations</label>\r\n                    <input type='number' step=\"10\" className='input-style' value={iterations} onChange={e => setiterations(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label >Select min frequency</label>\r\n                    <Dropdown refresh={props.refresh} injected={true} wickedApp={true} freq_boundary={'min'} frequenciesURL={props.frequenciesURL} onExecuteEvent = {executeHandler}></Dropdown>\r\n                </div>\r\n\r\n                {/* <div>\r\n                    <label>freq_min</label>\r\n                    <input type='number' className='input-style' value={freq_min} onChange={e => setfreq_min(e.target.value)}></input>\r\n                </div> */}\r\n\r\n                <div>\r\n                    <label >Select min frequency</label>\r\n                    <Dropdown refresh={props.refresh} injected={true} wickedApp={true} freq_boundary={'max'} frequenciesURL={props.frequenciesURL} onExecuteEvent = {executeHandler}></Dropdown>\r\n                </div>\r\n\r\n               {/*  <div>\r\n                    <label>Number of frames</label>\r\n                    <input type='number' className='input-style' value={freq_max} onChange={e => setfreq_max(e.target.value)}></input>\r\n                </div> */}\r\n\r\n                <div>\r\n                    <label>Delay</label>\r\n                    <input type='number' className='input-style' value={delay} onChange={e => setdelay(e.target.value)}></input>\r\n                </div>\r\n            </>\r\n        )}\r\n\r\n        {isChecked && (props.appName == 'Srad') && (\r\n            <>\r\n                <div>\r\n                    <label>Algorithm iterations in the image</label>\r\n                    <input type='number' className='input-style' value={niter} onChange={e => setNiter(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Amount of diffusion</label>\r\n                    <input type='number' step=\"0.01\" className='input-style' value={lambda} onChange={e => setLambda(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of rows</label>\r\n                    <input type='number' className='input-style' value={nr} onChange={e => setNr(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of columns</label>\r\n                    <input type='number' className='input-style' value={nc} onChange={e => setNc(e.target.value)}></input>\r\n                </div>\r\n            </>\r\n        )}\r\n\r\n\r\n\r\n\r\n        {isChecked && (props.appName == 'Lud') && (\r\n            <>\r\n                <div>\r\n                    <label>Matrix size</label>\r\n                    <input type='number' className='input-style' value={matrixSize} onChange={e => setMatrixSize(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Threads per block</label>\r\n                    <input type='number' className='input-style' value={lud_threads} onChange={e => set_lud_threads(e.target.value)}></input>\r\n                </div>\r\n            </>\r\n        )}\r\n\r\n        {isChecked && (props.appName == 'External') && (\r\n            <>\r\n                <div>\r\n                    <label>Application name</label>\r\n                    <input type='text' className='input-style' value={externalName} onChange={e => setExternalName(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Workload input</label>\r\n                    <input type='text' className='input-style' value={externalWorkload} onChange={e => setExternalWorkload(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div className='input-style'>\r\n                    <label>\r\n                    <input type=\"checkbox\" checked={make_isChecked} onChange={handle_makeCheckbox}/>Does it require execution of the makefile?\r\n                    </label>\r\n                </div>\r\n\r\n                <div>\r\n                    {make_isChecked && (\r\n                    <>\r\n                        <label>Makefile input</label>\r\n                        <input type='text' className='input-style' value={make_input} onChange={e => setMakeInput(e.target.value)}></input>\r\n                    </>\r\n                    )}\r\n                </div>\r\n            </>\r\n            )}\r\n      </div>\r\n      \r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppComponent;\r\n","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\DynamicCheckbox.js",["380","381","382"],[],"import './DynamicCheckbox.css';\r\nimport React, { useState, useEffect  } from 'react';\r\nimport Card from '../UI/Card';\r\n\r\nfunction DynamicCheckbox(props) {\r\n\r\n  const [selectedOption, setSelectedOption] = useState([]);\r\n  const [appsOptions, setAppsOptions] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  //Function to fetch data from the api\r\n  //The item will depend on the props, it could be for the workloads or the apps data.\r\n  useEffect(() => {\r\n    setError(null);\r\n    fetch(props.itemsURL ,{\r\n      method: 'GET',\r\n      headers: {\r\n          'Content-Type': 'application/json',\r\n          'ngrok-skip-browser-warning': '1'\r\n      }\r\n  })\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n      return response.json();\r\n    })\r\n    .then((data) => {\r\n      setAppsOptions(data.itemNames);\r\n    })\r\n    .catch((error) => {\r\n      setError(error.message);\r\n    });\r\n  }, []);\r\n  \r\n\r\n  //This function retrieves the data to the parent(ExecutionView) throught the function props.onExecuteEvent\r\n  //This function gets triggered every time after the page renders\r\n  useEffect(() => {\r\n    // This code will run after the render\r\n\r\n    if(props.refresh == true){\r\n      setSelectedOption(null);\r\n    }\r\n    \r\n    if (props.appName === 'BFS' && selectedOption !== null) {\r\n      const bfs_workload = {\r\n        bfs_workload: selectedOption\r\n      };\r\n      props.onExecuteEvent(bfs_workload);\r\n    } else if (props.appName === 'Gauss' && selectedOption !== null) {\r\n      const gauss_workload = {\r\n        gauss_workload: selectedOption\r\n      };\r\n      props.onExecuteEvent(gauss_workload);\r\n    }\r\n  }, [props.refresh ,selectedOption]);\r\n\r\n    \r\n  // Function to update the selected option\r\n  const toggleOption = (option) => {\r\n    if (selectedOption === option) {\r\n      // Deselect the option if it's already selected\r\n      setSelectedOption(null);\r\n    } else {\r\n      // Select the new option\r\n      setSelectedOption(option);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card className=\"dropdown\">\r\n        <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n          {/* This validation -> appsOptions && is used to make sure that the map is executed util the variable appsOptions has been fetched.\r\n              This is because fetch is an async function.*/}\r\n          {appsOptions && appsOptions.map((option) => (\r\n            <label className=\"dropdown-item\" key={option}>\r\n              <input\r\n                type=\"checkbox\"\r\n                className='options-style'\r\n                checked={selectedOption === option}\r\n                onChange={() => toggleOption(option)}\r\n              />{\" \"}\r\n              {option}\r\n            </label>\r\n          ))}\r\n        </div>\r\n      </Card>\r\n      {error != null && <label className='warning'>Error: {error}</label>}\r\n      \r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DynamicCheckbox;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\TFG\\Project\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Monitoring\\ConsoleView.js",[],[],{"ruleId":"383","replacedBy":"384"},{"ruleId":"385","severity":1,"message":"386","line":4,"column":8,"nodeType":"387","messageId":"388","endLine":4,"endColumn":23},{"ruleId":"385","severity":1,"message":"389","line":8,"column":8,"nodeType":"387","messageId":"388","endLine":8,"endColumn":17},{"ruleId":"385","severity":1,"message":"390","line":12,"column":11,"nodeType":"387","messageId":"388","endLine":12,"endColumn":21},{"ruleId":"385","severity":1,"message":"391","line":14,"column":11,"nodeType":"387","messageId":"388","endLine":14,"endColumn":15},{"ruleId":"385","severity":1,"message":"392","line":17,"column":12,"nodeType":"387","messageId":"388","endLine":17,"endColumn":23},{"ruleId":"393","severity":1,"message":"394","line":25,"column":12,"nodeType":"395","endLine":25,"endColumn":27,"suggestions":"396"},{"ruleId":"393","severity":1,"message":"397","line":34,"column":6,"nodeType":"395","endLine":34,"endColumn":8,"suggestions":"398"},{"ruleId":"393","severity":1,"message":"394","line":52,"column":6,"nodeType":"395","endLine":52,"endColumn":22,"suggestions":"399"},{"ruleId":"385","severity":1,"message":"400","line":8,"column":12,"nodeType":"387","messageId":"388","endLine":8,"endColumn":17},{"ruleId":"401","severity":1,"message":"402","line":47,"column":24,"nodeType":"403","messageId":"404","endLine":47,"endColumn":26},{"ruleId":"401","severity":1,"message":"402","line":54,"column":24,"nodeType":"403","messageId":"404","endLine":54,"endColumn":26},{"ruleId":"393","severity":1,"message":"394","line":61,"column":10,"nodeType":"395","endLine":61,"endColumn":44,"suggestions":"405"},{"ruleId":"401","severity":1,"message":"402","line":66,"column":26,"nodeType":"403","messageId":"404","endLine":66,"endColumn":28},{"ruleId":"401","severity":1,"message":"402","line":80,"column":26,"nodeType":"403","messageId":"404","endLine":80,"endColumn":28},{"ruleId":"385","severity":1,"message":"406","line":8,"column":12,"nodeType":"387","messageId":"388","endLine":8,"endColumn":26},{"ruleId":"401","severity":1,"message":"402","line":26,"column":21,"nodeType":"403","messageId":"404","endLine":26,"endColumn":23},{"ruleId":"401","severity":1,"message":"402","line":33,"column":21,"nodeType":"403","messageId":"404","endLine":33,"endColumn":23},{"ruleId":"401","severity":1,"message":"402","line":40,"column":26,"nodeType":"403","messageId":"404","endLine":40,"endColumn":28},{"ruleId":"393","severity":1,"message":"394","line":46,"column":10,"nodeType":"395","endLine":46,"endColumn":22,"suggestions":"407"},{"ruleId":"385","severity":1,"message":"408","line":7,"column":11,"nodeType":"387","messageId":"388","endLine":7,"endColumn":20},{"ruleId":"401","severity":1,"message":"402","line":31,"column":27,"nodeType":"403","messageId":"404","endLine":31,"endColumn":29},{"ruleId":"401","severity":1,"message":"402","line":37,"column":32,"nodeType":"403","messageId":"404","endLine":37,"endColumn":34},{"ruleId":"385","severity":1,"message":"409","line":46,"column":11,"nodeType":"387","messageId":"388","endLine":46,"endColumn":23},{"ruleId":"401","severity":1,"message":"402","line":59,"column":21,"nodeType":"403","messageId":"404","endLine":59,"endColumn":23},{"ruleId":"401","severity":1,"message":"402","line":67,"column":26,"nodeType":"403","messageId":"404","endLine":67,"endColumn":28},{"ruleId":"401","severity":1,"message":"402","line":75,"column":26,"nodeType":"403","messageId":"404","endLine":75,"endColumn":28},{"ruleId":"401","severity":1,"message":"402","line":83,"column":26,"nodeType":"403","messageId":"404","endLine":83,"endColumn":28},{"ruleId":"401","severity":1,"message":"402","line":91,"column":26,"nodeType":"403","messageId":"404","endLine":91,"endColumn":28},{"ruleId":"393","severity":1,"message":"394","line":99,"column":8,"nodeType":"395","endLine":99,"endColumn":110,"suggestions":"410"},{"ruleId":"401","severity":1,"message":"402","line":110,"column":39,"nodeType":"403","messageId":"404","endLine":110,"endColumn":41},{"ruleId":"401","severity":1,"message":"402","line":117,"column":39,"nodeType":"403","messageId":"404","endLine":117,"endColumn":41},{"ruleId":"401","severity":1,"message":"402","line":128,"column":38,"nodeType":"403","messageId":"404","endLine":128,"endColumn":40},{"ruleId":"401","severity":1,"message":"402","line":137,"column":38,"nodeType":"403","messageId":"404","endLine":137,"endColumn":40},{"ruleId":"401","severity":1,"message":"402","line":161,"column":38,"nodeType":"403","messageId":"404","endLine":161,"endColumn":40},{"ruleId":"401","severity":1,"message":"402","line":186,"column":38,"nodeType":"403","messageId":"404","endLine":186,"endColumn":40},{"ruleId":"383","replacedBy":"411"},{"ruleId":"383","replacedBy":"412"},{"ruleId":"393","severity":1,"message":"394","line":68,"column":8,"nodeType":"395","endLine":68,"endColumn":24,"suggestions":"413"},{"ruleId":"393","severity":1,"message":"397","line":34,"column":6,"nodeType":"395","endLine":34,"endColumn":8,"suggestions":"414"},{"ruleId":"401","severity":1,"message":"402","line":42,"column":22,"nodeType":"403","messageId":"404","endLine":42,"endColumn":24},{"ruleId":"393","severity":1,"message":"394","line":57,"column":6,"nodeType":"395","endLine":57,"endColumn":37,"suggestions":"415"},{"ruleId":"393","severity":1,"message":"394","line":30,"column":12,"nodeType":"395","endLine":30,"endColumn":42,"suggestions":"416"},{"ruleId":"385","severity":1,"message":"406","line":8,"column":12,"nodeType":"387","messageId":"388","endLine":8,"endColumn":26},{"ruleId":"401","severity":1,"message":"402","line":26,"column":21,"nodeType":"403","messageId":"404","endLine":26,"endColumn":23},{"ruleId":"401","severity":1,"message":"402","line":33,"column":21,"nodeType":"403","messageId":"404","endLine":33,"endColumn":23},{"ruleId":"401","severity":1,"message":"402","line":40,"column":26,"nodeType":"403","messageId":"404","endLine":40,"endColumn":28},{"ruleId":"393","severity":1,"message":"394","line":46,"column":10,"nodeType":"395","endLine":46,"endColumn":22,"suggestions":"417"},{"ruleId":"385","severity":1,"message":"400","line":8,"column":12,"nodeType":"387","messageId":"388","endLine":8,"endColumn":17},{"ruleId":"401","severity":1,"message":"402","line":52,"column":24,"nodeType":"403","messageId":"404","endLine":52,"endColumn":26},{"ruleId":"401","severity":1,"message":"402","line":59,"column":24,"nodeType":"403","messageId":"404","endLine":59,"endColumn":26},{"ruleId":"393","severity":1,"message":"394","line":66,"column":10,"nodeType":"395","endLine":66,"endColumn":59,"suggestions":"418"},{"ruleId":"401","severity":1,"message":"402","line":71,"column":26,"nodeType":"403","messageId":"404","endLine":71,"endColumn":28},{"ruleId":"401","severity":1,"message":"402","line":85,"column":26,"nodeType":"403","messageId":"404","endLine":85,"endColumn":28},{"ruleId":"401","severity":1,"message":"402","line":34,"column":27,"nodeType":"403","messageId":"404","endLine":34,"endColumn":29},{"ruleId":"401","severity":1,"message":"402","line":40,"column":32,"nodeType":"403","messageId":"404","endLine":40,"endColumn":34},{"ruleId":"401","severity":1,"message":"402","line":60,"column":23,"nodeType":"403","messageId":"404","endLine":60,"endColumn":25},{"ruleId":"401","severity":1,"message":"402","line":80,"column":21,"nodeType":"403","messageId":"404","endLine":80,"endColumn":23},{"ruleId":"401","severity":1,"message":"419","line":85,"column":23,"nodeType":"403","messageId":"404","endLine":85,"endColumn":25},{"ruleId":"401","severity":1,"message":"402","line":88,"column":26,"nodeType":"403","messageId":"404","endLine":88,"endColumn":28},{"ruleId":"401","severity":1,"message":"419","line":94,"column":17,"nodeType":"403","messageId":"404","endLine":94,"endColumn":19},{"ruleId":"401","severity":1,"message":"402","line":97,"column":26,"nodeType":"403","messageId":"404","endLine":97,"endColumn":28},{"ruleId":"401","severity":1,"message":"419","line":102,"column":18,"nodeType":"403","messageId":"404","endLine":102,"endColumn":20},{"ruleId":"401","severity":1,"message":"419","line":102,"column":34,"nodeType":"403","messageId":"404","endLine":102,"endColumn":36},{"ruleId":"401","severity":1,"message":"419","line":102,"column":47,"nodeType":"403","messageId":"404","endLine":102,"endColumn":49},{"ruleId":"401","severity":1,"message":"419","line":102,"column":59,"nodeType":"403","messageId":"404","endLine":102,"endColumn":61},{"ruleId":"401","severity":1,"message":"402","line":105,"column":26,"nodeType":"403","messageId":"404","endLine":105,"endColumn":28},{"ruleId":"401","severity":1,"message":"419","line":110,"column":18,"nodeType":"403","messageId":"404","endLine":110,"endColumn":20},{"ruleId":"401","severity":1,"message":"419","line":110,"column":34,"nodeType":"403","messageId":"404","endLine":110,"endColumn":36},{"ruleId":"401","severity":1,"message":"419","line":110,"column":46,"nodeType":"403","messageId":"404","endLine":110,"endColumn":48},{"ruleId":"401","severity":1,"message":"419","line":110,"column":58,"nodeType":"403","messageId":"404","endLine":110,"endColumn":60},{"ruleId":"401","severity":1,"message":"402","line":113,"column":26,"nodeType":"403","messageId":"404","endLine":113,"endColumn":28},{"ruleId":"401","severity":1,"message":"419","line":119,"column":23,"nodeType":"403","messageId":"404","endLine":119,"endColumn":25},{"ruleId":"401","severity":1,"message":"419","line":119,"column":44,"nodeType":"403","messageId":"404","endLine":119,"endColumn":46},{"ruleId":"401","severity":1,"message":"402","line":122,"column":26,"nodeType":"403","messageId":"404","endLine":122,"endColumn":28},{"ruleId":"401","severity":1,"message":"419","line":129,"column":25,"nodeType":"403","messageId":"404","endLine":129,"endColumn":27},{"ruleId":"401","severity":1,"message":"419","line":129,"column":51,"nodeType":"403","messageId":"404","endLine":129,"endColumn":53},{"ruleId":"393","severity":1,"message":"420","line":131,"column":8,"nodeType":"395","endLine":132,"endColumn":73,"suggestions":"421"},{"ruleId":"401","severity":1,"message":"402","line":143,"column":39,"nodeType":"403","messageId":"404","endLine":143,"endColumn":41},{"ruleId":"401","severity":1,"message":"402","line":150,"column":39,"nodeType":"403","messageId":"404","endLine":150,"endColumn":41},{"ruleId":"401","severity":1,"message":"402","line":161,"column":38,"nodeType":"403","messageId":"404","endLine":161,"endColumn":40},{"ruleId":"401","severity":1,"message":"402","line":170,"column":38,"nodeType":"403","messageId":"404","endLine":170,"endColumn":40},{"ruleId":"401","severity":1,"message":"402","line":194,"column":38,"nodeType":"403","messageId":"404","endLine":194,"endColumn":40},{"ruleId":"401","severity":1,"message":"402","line":221,"column":38,"nodeType":"403","messageId":"404","endLine":221,"endColumn":40},{"ruleId":"401","severity":1,"message":"402","line":235,"column":38,"nodeType":"403","messageId":"404","endLine":235,"endColumn":40},{"ruleId":"401","severity":1,"message":"402","line":29,"column":31,"nodeType":"403","messageId":"404","endLine":29,"endColumn":33},{"ruleId":"401","severity":1,"message":"402","line":30,"column":36,"nodeType":"403","messageId":"404","endLine":30,"endColumn":38},{"ruleId":"401","severity":1,"message":"402","line":39,"column":28,"nodeType":"403","messageId":"404","endLine":39,"endColumn":30},{"ruleId":"401","severity":1,"message":"402","line":48,"column":28,"nodeType":"403","messageId":"404","endLine":48,"endColumn":30},{"ruleId":"385","severity":1,"message":"422","line":4,"column":8,"nodeType":"387","messageId":"388","endLine":4,"endColumn":21},{"ruleId":"385","severity":1,"message":"400","line":9,"column":12,"nodeType":"387","messageId":"388","endLine":9,"endColumn":17},{"ruleId":"385","severity":1,"message":"423","line":11,"column":12,"nodeType":"387","messageId":"388","endLine":11,"endColumn":19},{"ruleId":"385","severity":1,"message":"424","line":13,"column":12,"nodeType":"387","messageId":"388","endLine":13,"endColumn":20},{"ruleId":"385","severity":1,"message":"425","line":27,"column":11,"nodeType":"387","messageId":"388","endLine":27,"endColumn":28},{"ruleId":"401","severity":1,"message":"419","line":75,"column":19,"nodeType":"403","messageId":"404","endLine":75,"endColumn":21},{"ruleId":"401","severity":1,"message":"419","line":86,"column":30,"nodeType":"403","messageId":"404","endLine":86,"endColumn":32},{"ruleId":"393","severity":1,"message":"426","line":111,"column":8,"nodeType":"395","endLine":111,"endColumn":65,"suggestions":"427"},{"ruleId":"401","severity":1,"message":"402","line":40,"column":22,"nodeType":"403","messageId":"404","endLine":40,"endColumn":24},{"ruleId":"401","severity":1,"message":"402","line":46,"column":22,"nodeType":"403","messageId":"404","endLine":46,"endColumn":24},{"ruleId":"401","severity":1,"message":"402","line":52,"column":22,"nodeType":"403","messageId":"404","endLine":52,"endColumn":24},{"ruleId":"428","severity":1,"message":"429","line":115,"column":11,"nodeType":"430","endLine":115,"endColumn":73},{"ruleId":"383","replacedBy":"431"},{"ruleId":"401","severity":1,"message":"402","line":29,"column":31,"nodeType":"403","messageId":"404","endLine":29,"endColumn":33},{"ruleId":"401","severity":1,"message":"402","line":30,"column":36,"nodeType":"403","messageId":"404","endLine":30,"endColumn":38},{"ruleId":"401","severity":1,"message":"402","line":39,"column":28,"nodeType":"403","messageId":"404","endLine":39,"endColumn":30},{"ruleId":"401","severity":1,"message":"402","line":48,"column":28,"nodeType":"403","messageId":"404","endLine":48,"endColumn":30},{"ruleId":"393","severity":1,"message":"394","line":68,"column":8,"nodeType":"395","endLine":68,"endColumn":24,"suggestions":"432"},{"ruleId":"385","severity":1,"message":"422","line":4,"column":8,"nodeType":"387","messageId":"388","endLine":4,"endColumn":21},{"ruleId":"385","severity":1,"message":"400","line":10,"column":12,"nodeType":"387","messageId":"388","endLine":10,"endColumn":17},{"ruleId":"385","severity":1,"message":"423","line":12,"column":12,"nodeType":"387","messageId":"388","endLine":12,"endColumn":19},{"ruleId":"385","severity":1,"message":"424","line":14,"column":12,"nodeType":"387","messageId":"388","endLine":14,"endColumn":20},{"ruleId":"385","severity":1,"message":"425","line":28,"column":11,"nodeType":"387","messageId":"388","endLine":28,"endColumn":28},{"ruleId":"401","severity":1,"message":"419","line":76,"column":19,"nodeType":"403","messageId":"404","endLine":76,"endColumn":21},{"ruleId":"401","severity":1,"message":"419","line":87,"column":30,"nodeType":"403","messageId":"404","endLine":87,"endColumn":32},{"ruleId":"393","severity":1,"message":"426","line":112,"column":8,"nodeType":"395","endLine":112,"endColumn":65,"suggestions":"433"},{"ruleId":"385","severity":1,"message":"400","line":8,"column":12,"nodeType":"387","messageId":"388","endLine":8,"endColumn":17},{"ruleId":"401","severity":1,"message":"402","line":52,"column":24,"nodeType":"403","messageId":"404","endLine":52,"endColumn":26},{"ruleId":"401","severity":1,"message":"402","line":59,"column":24,"nodeType":"403","messageId":"404","endLine":59,"endColumn":26},{"ruleId":"401","severity":1,"message":"402","line":61,"column":28,"nodeType":"403","messageId":"404","endLine":61,"endColumn":30},{"ruleId":"401","severity":1,"message":"402","line":63,"column":34,"nodeType":"403","messageId":"404","endLine":63,"endColumn":36},{"ruleId":"393","severity":1,"message":"394","line":86,"column":10,"nodeType":"395","endLine":86,"endColumn":59,"suggestions":"434"},{"ruleId":"401","severity":1,"message":"402","line":91,"column":26,"nodeType":"403","messageId":"404","endLine":91,"endColumn":28},{"ruleId":"401","severity":1,"message":"402","line":105,"column":26,"nodeType":"403","messageId":"404","endLine":105,"endColumn":28},{"ruleId":"393","severity":1,"message":"394","line":30,"column":12,"nodeType":"395","endLine":30,"endColumn":42,"suggestions":"435"},{"ruleId":"401","severity":1,"message":"402","line":40,"column":22,"nodeType":"403","messageId":"404","endLine":40,"endColumn":24},{"ruleId":"401","severity":1,"message":"402","line":46,"column":22,"nodeType":"403","messageId":"404","endLine":46,"endColumn":24},{"ruleId":"401","severity":1,"message":"402","line":52,"column":22,"nodeType":"403","messageId":"404","endLine":52,"endColumn":24},{"ruleId":"401","severity":1,"message":"402","line":58,"column":22,"nodeType":"403","messageId":"404","endLine":58,"endColumn":24},{"ruleId":"428","severity":1,"message":"429","line":121,"column":11,"nodeType":"430","endLine":121,"endColumn":73},{"ruleId":"401","severity":1,"message":"402","line":35,"column":27,"nodeType":"403","messageId":"404","endLine":35,"endColumn":29},{"ruleId":"401","severity":1,"message":"402","line":42,"column":27,"nodeType":"403","messageId":"404","endLine":42,"endColumn":29},{"ruleId":"401","severity":1,"message":"402","line":50,"column":26,"nodeType":"403","messageId":"404","endLine":50,"endColumn":28},{"ruleId":"401","severity":1,"message":"419","line":51,"column":40,"nodeType":"403","messageId":"404","endLine":51,"endColumn":42},{"ruleId":"401","severity":1,"message":"419","line":54,"column":40,"nodeType":"403","messageId":"404","endLine":54,"endColumn":42},{"ruleId":"401","severity":1,"message":"402","line":71,"column":23,"nodeType":"403","messageId":"404","endLine":71,"endColumn":25},{"ruleId":"401","severity":1,"message":"402","line":98,"column":26,"nodeType":"403","messageId":"404","endLine":98,"endColumn":28},{"ruleId":"401","severity":1,"message":"419","line":104,"column":17,"nodeType":"403","messageId":"404","endLine":104,"endColumn":19},{"ruleId":"401","severity":1,"message":"402","line":107,"column":26,"nodeType":"403","messageId":"404","endLine":107,"endColumn":28},{"ruleId":"401","severity":1,"message":"419","line":112,"column":23,"nodeType":"403","messageId":"404","endLine":112,"endColumn":25},{"ruleId":"401","severity":1,"message":"419","line":112,"column":41,"nodeType":"403","messageId":"404","endLine":112,"endColumn":43},{"ruleId":"401","severity":1,"message":"419","line":112,"column":59,"nodeType":"403","messageId":"404","endLine":112,"endColumn":61},{"ruleId":"401","severity":1,"message":"419","line":112,"column":74,"nodeType":"403","messageId":"404","endLine":112,"endColumn":76},{"ruleId":"401","severity":1,"message":"402","line":115,"column":26,"nodeType":"403","messageId":"404","endLine":115,"endColumn":28},{"ruleId":"401","severity":1,"message":"419","line":120,"column":18,"nodeType":"403","messageId":"404","endLine":120,"endColumn":20},{"ruleId":"401","severity":1,"message":"419","line":120,"column":34,"nodeType":"403","messageId":"404","endLine":120,"endColumn":36},{"ruleId":"401","severity":1,"message":"419","line":120,"column":46,"nodeType":"403","messageId":"404","endLine":120,"endColumn":48},{"ruleId":"401","severity":1,"message":"419","line":120,"column":58,"nodeType":"403","messageId":"404","endLine":120,"endColumn":60},{"ruleId":"401","severity":1,"message":"402","line":123,"column":26,"nodeType":"403","messageId":"404","endLine":123,"endColumn":28},{"ruleId":"401","severity":1,"message":"419","line":129,"column":23,"nodeType":"403","messageId":"404","endLine":129,"endColumn":25},{"ruleId":"401","severity":1,"message":"419","line":129,"column":44,"nodeType":"403","messageId":"404","endLine":129,"endColumn":46},{"ruleId":"401","severity":1,"message":"402","line":132,"column":26,"nodeType":"403","messageId":"404","endLine":132,"endColumn":28},{"ruleId":"401","severity":1,"message":"419","line":139,"column":25,"nodeType":"403","messageId":"404","endLine":139,"endColumn":27},{"ruleId":"401","severity":1,"message":"419","line":139,"column":51,"nodeType":"403","messageId":"404","endLine":139,"endColumn":53},{"ruleId":"393","severity":1,"message":"420","line":141,"column":8,"nodeType":"395","endLine":142,"endColumn":73,"suggestions":"436"},{"ruleId":"401","severity":1,"message":"402","line":153,"column":39,"nodeType":"403","messageId":"404","endLine":153,"endColumn":41},{"ruleId":"401","severity":1,"message":"402","line":160,"column":39,"nodeType":"403","messageId":"404","endLine":160,"endColumn":41},{"ruleId":"401","severity":1,"message":"402","line":168,"column":38,"nodeType":"403","messageId":"404","endLine":168,"endColumn":40},{"ruleId":"401","severity":1,"message":"402","line":177,"column":38,"nodeType":"403","messageId":"404","endLine":177,"endColumn":40},{"ruleId":"401","severity":1,"message":"402","line":211,"column":38,"nodeType":"403","messageId":"404","endLine":211,"endColumn":40},{"ruleId":"401","severity":1,"message":"402","line":238,"column":38,"nodeType":"403","messageId":"404","endLine":238,"endColumn":40},{"ruleId":"401","severity":1,"message":"402","line":252,"column":38,"nodeType":"403","messageId":"404","endLine":252,"endColumn":40},{"ruleId":"393","severity":1,"message":"397","line":34,"column":6,"nodeType":"395","endLine":34,"endColumn":8,"suggestions":"437"},{"ruleId":"401","severity":1,"message":"402","line":42,"column":22,"nodeType":"403","messageId":"404","endLine":42,"endColumn":24},{"ruleId":"393","severity":1,"message":"394","line":57,"column":6,"nodeType":"395","endLine":57,"endColumn":37,"suggestions":"438"},"no-new-object",["439"],"no-unused-vars","'DynamicCheckbox' is defined but never used.","Identifier","unusedVar","'TextInput' is defined but never used.","'freqString' is assigned a value but never used.","'freq' is assigned a value but never used.","'refreshFlag' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["440"],"React Hook useEffect has a missing dependency: 'props.itemsURL'. Either include it or remove the dependency array.",["441"],["442"],"'error' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["443"],"'selectedNumber' is assigned a value but never used.",["444"],"'workloads' is assigned a value but never used.","'handleChange' is assigned a value but never used.",["445"],["439"],["439"],["446"],["447"],["448"],["449"],["450"],["451"],"Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'make_input', 'make_isChecked', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["452"],"'ExecutionTime' is defined but never used.","'gpuTemp' is assigned a value but never used.","'gpuPower' is assigned a value but never used.","'changeCurrentApps' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetch_GPUData'. Either include it or remove the dependency array.",["453"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["439"],["454"],["455"],["456"],["457"],["458"],["459"],["460"],"no-object-constructor",{"desc":"461","fix":"462"},{"desc":"463","fix":"464"},{"desc":"465","fix":"466"},{"desc":"467","fix":"468"},{"desc":"469","fix":"470"},{"desc":"471","fix":"472"},{"desc":"473","fix":"474"},{"desc":"463","fix":"475"},{"desc":"476","fix":"477"},{"desc":"478","fix":"479"},{"desc":"469","fix":"480"},{"desc":"481","fix":"482"},{"desc":"483","fix":"484"},{"desc":"485","fix":"486"},{"desc":"473","fix":"487"},{"desc":"485","fix":"488"},{"desc":"481","fix":"489"},{"desc":"478","fix":"490"},{"desc":"491","fix":"492"},{"desc":"463","fix":"493"},{"desc":"476","fix":"494"},"Update the dependencies array to be: [executionFlag, props]",{"range":"495","text":"496"},"Update the dependencies array to be: [props.itemsURL]",{"range":"497","text":"498"},"Update the dependencies array to be: [props, selectedOption]",{"range":"499","text":"500"},"Update the dependencies array to be: [props, selectedFrequency, selectedNumber]",{"range":"501","text":"502"},"Update the dependencies array to be: [inputValue, props]",{"range":"503","text":"504"},"Update the dependencies array to be: [userData, cfd_threads, niter, lambda, nc, nr, width, height, nfr, np, matrixSize, lud_threads, boxes, props]",{"range":"505","text":"506"},"Update the dependencies array to be: [MonitoringFlag, props]",{"range":"507","text":"508"},{"range":"509","text":"498"},"Update the dependencies array to be: [props, props.refresh, selectedOption]",{"range":"510","text":"511"},"Update the dependencies array to be: [props.refresh, executionFlag, props]",{"range":"512","text":"513"},{"range":"514","text":"504"},"Update the dependencies array to be: [props, props.refresh, selectedFrequency, selectedNumber]",{"range":"515","text":"516"},"Update the dependencies array to be: [props.refresh, userData, cfd_threads, niter, lambda, nc, nr, width, height, nfr, np, matrixSize, lud_threads, boxes, externalName, externalWorkload, props, make_isChecked, make_input]",{"range":"517","text":"518"},"Update the dependencies array to be: [fetch_GPUData, props.currentAppsURL, props.getExecState, props.gpuData]",{"range":"519","text":"520"},{"range":"521","text":"508"},{"range":"522","text":"520"},{"range":"523","text":"516"},{"range":"524","text":"513"},"Update the dependencies array to be: [props.refresh, userData, cfd_threads, niter, lambda, nc, nr, iterations, freq_min, freq_max, delay, matrixSize, lud_threads, boxes, externalName, externalWorkload, props, make_isChecked, make_input]",{"range":"525","text":"526"},{"range":"527","text":"498"},{"range":"528","text":"511"},[746,761],"[executionFlag, props]",[981,983],"[props.itemsURL]",[1623,1639],"[props, selectedOption]",[1708,1742],"[props, selectedFrequency, selectedNumber]",[1203,1215],"[inputValue, props]",[3020,3122],"[userData, cfd_threads, niter, lambda, nc, nr, width, height, nfr, np, matrixSize, lud_threads, boxes, props]",[2016,2032],"[MonitoringFlag, props]",[981,983],[1702,1733],"[props, props.refresh, selectedOption]",[845,875],"[props.refresh, executionFlag, props]",[1203,1215],[1822,1871],"[props, props.refresh, selectedFrequency, selectedNumber]",[4219,4378],"[props.refresh, userData, cfd_threads, niter, lambda, nc, nr, width, height, nfr, np, matrixSize, lud_threads, boxes, externalName, externalWorkload, props, make_isChecked, make_input]",[3824,3881],"[fetch_GPUData, props.currentAppsURL, props.getExecState, props.gpuData]",[2016,2032],[3866,3923],[2325,2374],[845,875],[4671,4845],"[props.refresh, userData, cfd_threads, niter, lambda, nc, nr, iterations, freq_min, freq_max, delay, matrixSize, lud_threads, boxes, externalName, externalWorkload, props, make_isChecked, make_input]",[981,983],[1710,1741]]