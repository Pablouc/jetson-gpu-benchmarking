[{"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\index.js":"1","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\App.js":"2","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Card.js":"3","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\ExecutionView.js":"4","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Navbar.js":"5","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\StaticCheckbox.js":"6","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\DynamicCheckbox.js":"7","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\Dropdown.js":"8","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\TextInput.js":"9","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Apps\\AppComponent.js":"10","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\index.js":"11","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\App.js":"12","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\ExecutionView.js":"13","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Navbar.js":"14","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\DynamicCheckbox.js":"15","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\StaticCheckbox.js":"16","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\TextInput.js":"17","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Card.js":"18","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\Dropdown.js":"19","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Apps\\AppComponent.js":"20","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\PopUp.js":"21","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\MainView\\MainView.js":"22","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Monitoring\\MonitoringView.js":"23","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Monitoring\\MyChart.js":"24"},{"size":216,"mtime":1695751156443,"results":"25","hashOfConfig":"26"},{"size":733,"mtime":1698272315918,"results":"27","hashOfConfig":"26"},{"size":187,"mtime":1695751156438,"results":"28","hashOfConfig":"26"},{"size":4385,"mtime":1698269703543,"results":"29","hashOfConfig":"26"},{"size":264,"mtime":1698200175697,"results":"30","hashOfConfig":"26"},{"size":1621,"mtime":1695794812252,"results":"31","hashOfConfig":"26"},{"size":2873,"mtime":1698217616423,"results":"32","hashOfConfig":"26"},{"size":2840,"mtime":1698272621129,"results":"33","hashOfConfig":"26"},{"size":1569,"mtime":1698217997513,"results":"34","hashOfConfig":"26"},{"size":7101,"mtime":1698217720803,"results":"35","hashOfConfig":"26"},{"size":216,"mtime":1698357842807,"results":"36","hashOfConfig":"37"},{"size":940,"mtime":1698773244879,"results":"38","hashOfConfig":"37"},{"size":5604,"mtime":1698688915177,"results":"39","hashOfConfig":"37"},{"size":264,"mtime":1698357842807,"results":"40","hashOfConfig":"37"},{"size":2967,"mtime":1698359107714,"results":"41","hashOfConfig":"37"},{"size":1735,"mtime":1698359093396,"results":"42","hashOfConfig":"37"},{"size":1569,"mtime":1698357842805,"results":"43","hashOfConfig":"37"},{"size":187,"mtime":1698357842805,"results":"44","hashOfConfig":"37"},{"size":2969,"mtime":1698359078447,"results":"45","hashOfConfig":"37"},{"size":7454,"mtime":1698359123330,"results":"46","hashOfConfig":"37"},{"size":540,"mtime":1698369854213,"results":"47","hashOfConfig":"37"},{"size":1509,"mtime":1698728343217,"results":"48","hashOfConfig":"37"},{"size":6402,"mtime":1698787124024,"results":"49","hashOfConfig":"37"},{"size":1048,"mtime":1698788070634,"results":"50","hashOfConfig":"37"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1f1td20",{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},"1fadv2y",{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"89"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"89"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"89"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"89"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"89"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"89"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\index.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\App.js",[],[],["135"],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Card.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\ExecutionView.js",["136","137","138","139","140"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Navbar.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\StaticCheckbox.js",["141"],[],"import './StaticCheckbox.css';\r\nimport React, {useState, useEffect} from 'react';\r\n\r\nconst StaticCheckbox = (props) =>{\r\n\r\n    const [executionFlag, setExecutionFlag] = useState(false);\r\n\r\n    const handleCheckboxChange = (event) =>{\r\n        const id = event.target.id;\r\n\r\n        // If the clicked checkbox is already checked, uncheck it\r\n        if (id === executionFlag) {\r\n        setExecutionFlag(null);\r\n        } else {\r\n        setExecutionFlag(id); // Otherwise, check the clicked checkbox\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        // This code will run after the state has been updated\r\n        const executionType={ \r\n          execType: executionFlag\r\n        };\r\n        props.onExecuteEvent(executionType);  \r\n        }, [executionFlag]);\r\n\r\n    return(\r\n        <div>\r\n            <div className='checkbox-margin'>\r\n                <label  className='form-control'>\r\n                    <input\r\n                        id='simult'\r\n                        type='checkbox'\r\n                        checked= {executionFlag === 'simult'}\r\n                        onChange={handleCheckboxChange}\r\n                    />Simultaneous\r\n                </label> \r\n                <label className='form-control'>\r\n                    <input\r\n                        id='not-simult'\r\n                        type='checkbox'\r\n                        checked={executionFlag === 'not-simult'}\r\n                        onChange={handleCheckboxChange}\r\n                    />Not Simultaneous\r\n                </label> \r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default StaticCheckbox;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\DynamicCheckbox.js",["142","143"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\Dropdown.js",["144","145","146","147","148","149"],[],"import React, { useState, useEffect } from 'react';\r\n\r\nimport './Dropdown.css';\r\n\r\nconst Dropdown = (props) => {\r\n\r\n    const [selectedNumber, setSelectedNumber] = useState('');\r\n    const [error, setError] = useState(null);\r\n    const [frequenciesOptions, setFrequenciesOptions] = useState('');\r\n    const [selectedFrequency, setSelectedFrequency] = useState('');\r\n\r\n    const handleSelectChange = (e) => {\r\n      setSelectedNumber(e.target.value);\r\n    };\r\n  \r\n    const numbers = Array.from({ length: 15 }, (_, i) => i + 1);\r\n\r\n\r\n    useEffect(() => {\r\n      if (props.injected === true) {\r\n        setError(null);\r\n        fetch(props.frequenciesURL, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'ngrok-skip-browser-warning': '1',\r\n          },\r\n        })\r\n          .then((response) => {\r\n            if (!response.ok) {\r\n              throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n            return response.json();\r\n          })\r\n          .then((data) => {\r\n            setFrequenciesOptions(data);\r\n          })\r\n          .catch((error) => {\r\n            setError(error.message);\r\n          });\r\n      }\r\n    }, [props.injected, props.frequenciesURL, props.frequenciesOptions]);\r\n\r\n    \r\n    useEffect(() => {\r\n      // This code will run after the state has been updated\r\n      if(props.injected== false){\r\n        const execNum={ \r\n          execNum: selectedNumber\r\n        };\r\n        props.onExecuteEvent(execNum); \r\n      }\r\n      \r\n      if(props.injected== true){\r\n        const freq={ \r\n          freq:selectedFrequency\r\n        };\r\n        props.onExecuteEvent(freq); \r\n      }\r\n\r\n      }, [selectedFrequency,selectedNumber]);\r\n\r\n  \r\n    return (\r\n      <div>\r\n        {(props.injected == false) && (\r\n          <div>\r\n          <select className='select' onChange={handleSelectChange} value={selectedNumber}>\r\n            <option value=\"\">Select a number</option>\r\n            {numbers.map((number) => (\r\n              <option key={number} value={number}>\r\n                {number}\r\n              </option>\r\n            ))}\r\n          </select>\r\n\r\n          </div>\r\n        )}\r\n\r\n        {(props.injected == true) && frequenciesOptions && (          \r\n            <div>\r\n            <select\r\n              className=\"select\"\r\n              onChange={(e) => setSelectedFrequency(e.target.value)}\r\n              value={selectedFrequency}\r\n            >\r\n              <option value=\"\">Select a frequency</option>\r\n              {frequenciesOptions.map((frequency) => (\r\n                <option key={frequency} value={frequency}>\r\n                  {frequency}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        )}\r\n        \r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Dropdown;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\TextInput.js",["150","151","152","153","154"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Apps\\AppComponent.js",["155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170"],[],"import React, { useState, useEffect  } from 'react';\r\nimport DynamicCheckbox from '../Request-Execution/DynamicCheckbox';\r\nimport './AppComponents.css';\r\n\r\nconst AppComponent = (props) => {\r\n  \r\n    const workloads = 'workloads';\r\n    let userData={}\r\n\r\n    const [isChecked, setIsChecked] = useState(false);\r\n\r\n    //Constants to save inputs values\r\n    const [cfd_threads, set_cfd_Threads] = useState('');\r\n    const [niter, setNiter] = useState('');\r\n    const [lambda, setLambda] = useState('');\r\n    const [nc, setNc] = useState('');\r\n    const [nr, setNr] = useState('');\r\n    const [width, setWidth] = useState('');\r\n    const [height, setHeight] = useState('');\r\n    const [nfr, setNfr] = useState('');\r\n    const [np, setNp] = useState('');\r\n    const [matrixSize, setMatrixSize] = useState('');\r\n    const [lud_threads, set_lud_threads] = useState('');\r\n    const [boxes, setBoxes] = useState('');\r\n\r\n    const executeHandler = ( enteredUserData ) => {\r\n        userData = {\r\n            ...userData, // Keep the existing data in userData\r\n            ...enteredUserData, // Add the data from enteredUserData\r\n        };\r\n        if (props.appName == 'CFD'){\r\n            const cfdApp={\r\n                cfd_workloads : userData.cfd_workload\r\n            }\r\n            props.onExecuteEvent(cfdApp);\r\n        }\r\n        else if (props.appName == 'BFS'){\r\n            const bfs = {\r\n                bfs_name:'BFS',\r\n                bfs_workloads : userData.bfs_workload\r\n            }\r\n            props.onExecuteEvent(bfs);\r\n        }\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        props.updateData(event.target.value);\r\n    }\r\n\r\n    const handleCheckboxChange = () => {\r\n        setIsChecked(prevState => !prevState); // Invierte el valor de isChecked\r\n    };\r\n\r\n    //Sending data the the parent\r\n    useEffect(() => {\r\n    // This code will run after the state has been updated\r\n\r\n\r\n    if(props.appName=='CFD'){\r\n        const cfd={ \r\n        cfd_name: 'CFD',\r\n        cfd_threads: cfd_threads\r\n        };\r\n        props.onExecuteEvent(cfd); \r\n    }\r\n\r\n    else if(props.appName=='LavaMD'){\r\n        const lavaMD={ \r\n        lava_name: 'LavaMD',\r\n        lava_workloads:' -boxes1d '+ boxes\r\n        };\r\n        props.onExecuteEvent(lavaMD); \r\n    }\r\n\r\n    else if(props.appName=='Particle Filter'){\r\n        const particle={ \r\n        filter_name: 'Particle Filter',\r\n        filter_workloads: ' -x ' + width + ' -y ' + height + ' -z ' + nfr + ' -np ' + np\r\n        };\r\n        props.onExecuteEvent(particle); \r\n    }\r\n\r\n    else if(props.appName=='Srad'){\r\n        const srad={ \r\n        srad_name: 'Srad',\r\n        srad_workloads: String(niter) + ' ' + String(lambda) + ' ' +  String(nr)+ ' ' + String(nc)\r\n        };\r\n        props.onExecuteEvent(srad); \r\n    }\r\n\r\n    else if(props.appName=='Lud'){\r\n        const lud={ \r\n        lud_name: 'Lud',\r\n        lud_workloads: ' -s ' + matrixSize ,\r\n        lud_threads: lud_threads\r\n        };\r\n        props.onExecuteEvent(lud); \r\n    } \r\n    }, [userData, cfd_threads, niter, lambda, nc, nr, width, height, nfr, np, matrixSize, lud_threads, boxes]);\r\n    \r\n\r\n\r\n  return (\r\n    <div className='app-style'>\r\n        <label>\r\n      <input type=\"checkbox\" onChange={handleCheckboxChange}/>{props.appName}\r\n      </label>\r\n      <div className='text-style'>\r\n        \r\n        { isChecked && (props.appName == 'BFS') && (\r\n            <>\r\n            <label>Workloads files:</label>\r\n            <DynamicCheckbox itemsURL={props.itemsURL} appName={'BFS'} onExecuteEvent = {executeHandler}/>\r\n            </>\r\n        )}\r\n\r\n        { isChecked && (props.appName == 'CFD') && (\r\n        <>\r\n            <label>Workloads files:</label>\r\n            <DynamicCheckbox itemsURL={props.itemsURL} appName={'CFD'} onExecuteEvent = {executeHandler}/>\r\n            <div >\r\n                <label>Threads per block</label>\r\n                <input type='number' className='input-style' value={cfd_threads} onChange={e => set_cfd_Threads(e.target.value)}></input>\r\n            </div>\r\n        </>\r\n        )}\r\n\r\n        {isChecked && (props.appName == 'LavaMD') && (\r\n        <>\r\n            <div>\r\n                <label>Number of boxes</label>\r\n                <input type='number' className='input-style' value={boxes} onChange={e => setBoxes(e.target.value)}></input>\r\n            </div>\r\n        </>\r\n        )}\r\n\r\n        {isChecked && (props.appName == 'Particle Filter') && (\r\n            <>\r\n                <div>\r\n                    <label>Width</label>\r\n                    <input type='number' className='input-style' value={width} onChange={e => setWidth(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Height</label>\r\n                    <input type='number' className='input-style' value={height} onChange={e => setHeight(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of frames</label>\r\n                    <input type='number' className='input-style' value={nfr} onChange={e => setNfr(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of particles</label>\r\n                    <input type='number' className='input-style' value={np} onChange={e => setNp(e.target.value)}></input>\r\n                </div>\r\n            </>\r\n        )}\r\n\r\n        {isChecked && (props.appName == 'Srad') && (\r\n            <>\r\n                <div>\r\n                    <label>Algorithm iterations in the image</label>\r\n                    <input type='number' className='input-style' value={niter} onChange={e => setNiter(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Amount of diffusion</label>\r\n                    <input type='number' step=\"0.01\" className='input-style' value={lambda} onChange={e => setLambda(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of rows</label>\r\n                    <input type='number' className='input-style' value={nr} onChange={e => setNr(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of columns</label>\r\n                    <input type='number' className='input-style' value={nc} onChange={e => setNc(e.target.value)}></input>\r\n                </div>\r\n            </>\r\n        )}\r\n\r\n\r\n        {isChecked && (props.appName == 'Lud') && (\r\n            <>\r\n                <div>\r\n                    <label>Matrix size</label>\r\n                    <input type='number' className='input-style' value={matrixSize} onChange={e => setMatrixSize(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Threads per block</label>\r\n                    <input type='number' className='input-style' value={lud_threads} onChange={e => set_lud_threads(e.target.value)}></input>\r\n                </div>\r\n            </>\r\n        )}\r\n      </div>\r\n      \r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppComponent;\r\n",["171"],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\index.js",[],[],["172"],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\App.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\ExecutionView.js",["173"],[],"import React, {useState, useEffect } from 'react';\r\n\r\nimport './ExecutionView.css';\r\nimport Card from '../UI/Card';\r\nimport StaticCheckbox from './StaticCheckbox';\r\nimport Dropdown from './Dropdown';\r\nimport AppComponent from '../Apps/AppComponent';\r\nimport Popup from '../UI/PopUp';\r\n\r\nfunction ExecutionView(props) { \r\n    const workloads = 'workloads';\r\n    let userData = {};\r\n\r\n    const [refreshFlag, setRefreshFlag] = useState(false);\r\n    const [isPopupOpen, setPopupOpen] = useState(false);\r\n    const [MonitoringFlag, setMonitoringFlag] = useState(false);\r\n\r\n    const executeHandler = ( enteredUserData ) => {\r\n        userData = {\r\n            ...userData, // Keep the existing data in userData\r\n            ...enteredUserData, // Add the data from enteredUserData\r\n          };\r\n        \r\n             \r\n    }\r\n\r\n\r\n\r\n    async function requestExecution() {\r\n        setRefreshFlag(true);\r\n        setRefreshFlag(false);\r\n        setPopupOpen(true);\r\n        props.setExecState('InProgress');\r\n      \r\n        try {\r\n          const response = await fetch(props.executionURL, {\r\n            method: 'POST',\r\n            body: JSON.stringify(userData),\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          });\r\n      \r\n          if (!response.ok) {\r\n            // Handle HTTP errors\r\n            props.setExecState('Failed');\r\n            throw new Error(`HTTP error! Status: ${response.status}`);\r\n          }\r\n      \r\n          const data = await response.json();\r\n          props.setExecState('Succed');\r\n      \r\n          console.log(data);\r\n      \r\n        } catch (error) {\r\n          console.error('Error:', error.message);\r\n      \r\n        }\r\n      }\r\n      \r\n\r\n\r\n    const closePopup = () => {\r\n        setPopupOpen(false);\r\n        setMonitoringFlag(true);\r\n      };\r\n\r\n      useEffect(() => {\r\n        props.setView(MonitoringFlag);\r\n    }, [MonitoringFlag]);\r\n\r\n\r\n\r\n    return(\r\n        <div >\r\n            <div className='popup'>\r\n                <Popup isOpen={isPopupOpen} onClose={closePopup}/>\r\n            </div>\r\n            <div className='execution-container'>\r\n                <Card className='left-container'>\r\n                    <label className='label'>Select the applications</label>\r\n                    {/* <div>\r\n                        \r\n                        <DynamicCheckbox itemsURL={props.appsURL} field={apps} onExecuteEvent = {executeHandler} ></DynamicCheckbox>\r\n                    </div>\r\n                    <div>\r\n                        <label className='label'>Select the workloads</label>\r\n                        <DynamicCheckbox itemsURL={props.workloadsURL} field={workloads} onExecuteEvent = {executeHandler}></DynamicCheckbox>\r\n                    </div> */}\r\n                    <div>\r\n                        <AppComponent refresh={refreshFlag} itemsURL={props.bfs_workloadsURL} field={workloads} onExecuteEvent = {executeHandler} appName  ={'BFS'}/>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <AppComponent refresh={refreshFlag} itemsURL={props.cfd_workloadsURL} field={workloads} onExecuteEvent = {executeHandler} appName  ={'CFD'}/>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <AppComponent refresh={refreshFlag} itemsURL={props.workloadsURL} field={workloads} onExecuteEvent = {executeHandler} appName  ={'Srad'}/>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <AppComponent refresh={refreshFlag} itemsURL={props.workloadsURL} field={workloads} onExecuteEvent = {executeHandler} appName  ={'Particle Filter'}/>\r\n                    </div>\r\n\r\n                \r\n                    \r\n                </Card>\r\n                <Card className='right-container'>\r\n\r\n                    <div className='margins'>\r\n                        <AppComponent refresh={refreshFlag} itemsURL={props.workloadsURL} field={workloads} onExecuteEvent = {executeHandler} appName  ={'LavaMD'}/>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <AppComponent refresh={refreshFlag} itemsURL={props.workloadsURL} field={workloads} onExecuteEvent = {executeHandler} appName  ={'Lud'}/>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <div>\r\n                            <label className='label'>Select the execution mode</label>\r\n                        </div>\r\n                        <StaticCheckbox refresh={refreshFlag} onExecuteEvent = {executeHandler}></StaticCheckbox>\r\n                    </div>\r\n\r\n                    <div>\r\n                    <label className='label'>Amount of executions</label>\r\n                    <Dropdown refresh={refreshFlag} injected={false} onExecuteEvent = {executeHandler}></Dropdown>\r\n                    </div>\r\n\r\n                    <div>\r\n                    <label className='label'>Amount of executions</label>\r\n                    <Dropdown refresh={refreshFlag} injected={true} frequenciesURL={props.frequenciesURL} onExecuteEvent = {executeHandler}></Dropdown>\r\n                    </div>\r\n                    \r\n                    {/*<div>\r\n                        <label className='label'>Select the GPU frequency</label>\r\n                        <TextInput field={freq} onExecuteEvent = {executeHandler} label={freqString}></TextInput>\r\n                    </div>\r\n                */}\r\n                    <button className='button' onClick={requestExecution}>Execute</button>\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExecutionView;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Navbar.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\DynamicCheckbox.js",["174","175","176"],[],"import './DynamicCheckbox.css';\r\nimport React, { useState, useEffect  } from 'react';\r\nimport Card from '../UI/Card';\r\n\r\nfunction DynamicCheckbox(props) {\r\n\r\n  const [selectedOption, setSelectedOption] = useState([]);\r\n  const [appsOptions, setAppsOptions] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  //Function to fetch data from the api\r\n  //The item will depend on the props, it could be for the workloads or the apps data.\r\n  useEffect(() => {\r\n    setError(null);\r\n    fetch(props.itemsURL ,{\r\n      method: 'GET',\r\n      headers: {\r\n          'Content-Type': 'application/json',\r\n          'ngrok-skip-browser-warning': '1'\r\n      }\r\n  })\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n      return response.json();\r\n    })\r\n    .then((data) => {\r\n      setAppsOptions(data.itemNames);\r\n    })\r\n    .catch((error) => {\r\n      setError(error.message);\r\n    });\r\n  }, []);\r\n  \r\n\r\n  //This function retrieves the data to the parent(ExecutionView) throught the function props.onExecuteEvent\r\n  //This function gets triggered every time after the page renders\r\n  useEffect(() => {\r\n    // This code will run after the render\r\n\r\n    if(props.refresh == true){\r\n      setSelectedOption(null);\r\n    }\r\n    \r\n    if (props.appName === 'BFS' && selectedOption !== null) {\r\n      const bfs_workload = {\r\n        bfs_workload: selectedOption\r\n      };\r\n      props.onExecuteEvent(bfs_workload);\r\n    } else if (props.appName === 'CFD' && selectedOption !== null) {\r\n      const cfd_workload = {\r\n        cfd_workload: selectedOption\r\n      };\r\n      props.onExecuteEvent(cfd_workload);\r\n    }\r\n  }, [props.refresh ,selectedOption]);\r\n\r\n    \r\n  // Function to update the selected option\r\n  const toggleOption = (option) => {\r\n    if (selectedOption === option) {\r\n      // Deselect the option if it's already selected\r\n      setSelectedOption(null);\r\n    } else {\r\n      // Select the new option\r\n      setSelectedOption(option);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card className=\"dropdown\">\r\n        <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n          {/* This validation -> appsOptions && is used to make sure that the map is executed util the variable appsOptions has been fetched.\r\n              This is because fetch is an async function.*/}\r\n          {appsOptions && appsOptions.map((option) => (\r\n            <label className=\"dropdown-item\" key={option}>\r\n              <input\r\n                type=\"checkbox\"\r\n                className='options-style'\r\n                checked={selectedOption === option}\r\n                onChange={() => toggleOption(option)}\r\n              />{\" \"}\r\n              {option}\r\n            </label>\r\n          ))}\r\n        </div>\r\n      </Card>\r\n      {error != null && <label className='warning'>Error: {error}</label>}\r\n      \r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DynamicCheckbox;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\StaticCheckbox.js",["177"],[],"import './StaticCheckbox.css';\r\nimport React, {useState, useEffect} from 'react';\r\n\r\nconst StaticCheckbox = (props) =>{\r\n\r\n    const [executionFlag, setExecutionFlag] = useState(false);\r\n\r\n    const handleCheckboxChange = (event) =>{\r\n        const id = event.target.id;\r\n\r\n        // If the clicked checkbox is already checked, uncheck it\r\n        if (id === executionFlag) {\r\n        setExecutionFlag(null);\r\n        } else {\r\n        setExecutionFlag(id); // Otherwise, check the clicked checkbox\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        // This code will run after the state has been updated\r\n\r\n        if( props.refresh === true){\r\n            setExecutionFlag(false);\r\n        }\r\n        \r\n        const executionType={ \r\n          execType: executionFlag\r\n        };\r\n        props.onExecuteEvent(executionType);  \r\n        }, [props.refresh ,executionFlag]);\r\n\r\n    return(\r\n        <div>\r\n            <div className='checkbox-margin'>\r\n                <label  className='form-control'>\r\n                    <input\r\n                        id='simult'\r\n                        type='checkbox'\r\n                        checked= {executionFlag === 'simult'}\r\n                        onChange={handleCheckboxChange}\r\n                    />Simultaneous\r\n                </label> \r\n                <label className='form-control'>\r\n                    <input\r\n                        id='not-simult'\r\n                        type='checkbox'\r\n                        checked={executionFlag === 'not-simult'}\r\n                        onChange={handleCheckboxChange}\r\n                    />Not Simultaneous\r\n                </label> \r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default StaticCheckbox;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\TextInput.js",["178","179","180","181","182"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Card.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\Dropdown.js",["183","184","185","186","187","188"],[],"import React, { useState, useEffect } from 'react';\r\n\r\nimport './Dropdown.css';\r\n\r\nconst Dropdown = (props) => {\r\n\r\n    const [selectedNumber, setSelectedNumber] = useState('');\r\n    const [error, setError] = useState(null);\r\n    const [frequenciesOptions, setFrequenciesOptions] = useState('');\r\n    const [selectedFrequency, setSelectedFrequency] = useState('');\r\n\r\n    const handleSelectChange = (e) => {\r\n      setSelectedNumber(e.target.value);\r\n    };\r\n  \r\n    const numbers = Array.from({ length: 15 }, (_, i) => i + 1);\r\n\r\n\r\n    useEffect(() => {\r\n      if (props.injected === true) {\r\n        setError(null);\r\n        fetch(props.frequenciesURL, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'ngrok-skip-browser-warning': '1',\r\n          },\r\n        })\r\n          .then((response) => {\r\n            if (!response.ok) {\r\n              throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n            return response.json();\r\n          })\r\n          .then((data) => {\r\n            setFrequenciesOptions(data);\r\n          })\r\n          .catch((error) => {\r\n            setError(error.message);\r\n          });\r\n      }\r\n    }, [props.injected, props.frequenciesURL, props.frequenciesOptions]);\r\n\r\n    \r\n    useEffect(() => {\r\n      // This code will run after the state has been updated\r\n      if( props.refresh === true){\r\n        setSelectedNumber('');\r\n        setSelectedFrequency('');\r\n      }\r\n\r\n      if(props.injected== false){\r\n        const execNum={ \r\n          execNum: selectedNumber\r\n        };\r\n        props.onExecuteEvent(execNum); \r\n      }\r\n      \r\n      if(props.injected== true){\r\n        const freq={ \r\n          freq:selectedFrequency\r\n        };\r\n        props.onExecuteEvent(freq); \r\n      }\r\n\r\n      }, [props.refresh ,selectedFrequency,selectedNumber]);\r\n\r\n  \r\n    return (\r\n      <div>\r\n        {(props.injected == false) && (\r\n          <div>\r\n          <select className='select' onChange={handleSelectChange} value={selectedNumber}>\r\n            <option value=\"\">Select a number</option>\r\n            {numbers.map((number) => (\r\n              <option key={number} value={number}>\r\n                {number}\r\n              </option>\r\n            ))}\r\n          </select>\r\n\r\n          </div>\r\n        )}\r\n\r\n        {(props.injected == true) && frequenciesOptions && (          \r\n            <div>\r\n            <select\r\n              className=\"select\"\r\n              onChange={(e) => setSelectedFrequency(e.target.value)}\r\n              value={selectedFrequency}\r\n            >\r\n              <option value=\"\">Select a frequency</option>\r\n              {frequenciesOptions.map((frequency) => (\r\n                <option key={frequency} value={frequency}>\r\n                  {frequency}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        )}\r\n        \r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Dropdown;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Apps\\AppComponent.js",["189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204"],[],"import React, { useState, useEffect  } from 'react';\r\nimport DynamicCheckbox from '../Request-Execution/DynamicCheckbox';\r\nimport './AppComponents.css';\r\n\r\nconst AppComponent = (props) => {\r\n  \r\n    let userData={}\r\n\r\n    const [isChecked, setIsChecked] = useState(false);\r\n\r\n    //Constants to save inputs values\r\n    const [cfd_threads, set_cfd_Threads] = useState('');\r\n    const [niter, setNiter] = useState('');\r\n    const [lambda, setLambda] = useState('');\r\n    const [nc, setNc] = useState('');\r\n    const [nr, setNr] = useState('');\r\n    const [width, setWidth] = useState('');\r\n    const [height, setHeight] = useState('');\r\n    const [nfr, setNfr] = useState('');\r\n    const [np, setNp] = useState('');\r\n    const [matrixSize, setMatrixSize] = useState('');\r\n    const [lud_threads, set_lud_threads] = useState('');\r\n    const [boxes, setBoxes] = useState('');\r\n\r\n    const executeHandler = ( enteredUserData ) => {\r\n        userData = {\r\n            ...userData, // Keep the existing data in userData\r\n            ...enteredUserData, // Add the data from enteredUserData\r\n        };\r\n        if (props.appName == 'CFD'){\r\n            const cfdApp={\r\n                cfd_workloads : userData.cfd_workload\r\n            }\r\n            props.onExecuteEvent(cfdApp);\r\n        }\r\n        else if (props.appName == 'BFS'){\r\n            const bfs = {\r\n                bfs_name:'BFS',\r\n                bfs_workloads : userData.bfs_workload\r\n            }\r\n            props.onExecuteEvent(bfs);\r\n        }\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        props.updateData(event.target.value);\r\n    }\r\n\r\n    const handleCheckboxChange = () => {\r\n        setIsChecked(prevState => !prevState); // Invierte el valor de isChecked\r\n    };\r\n\r\n    //Sending data the the parent\r\n    useEffect(() => {\r\n    // This code will run after the state has been updated\r\n    if( props.refresh == true){\r\n        setIsChecked(false);\r\n        set_cfd_Threads('');\r\n        setNiter('');\r\n        setLambda('');\r\n        setNc('');\r\n        setNr('');\r\n        setWidth('');\r\n        setHeight('');\r\n        setNfr('');\r\n        setNp('');\r\n        setMatrixSize('');\r\n        set_lud_threads('');\r\n        setBoxes('');\r\n    }\r\n\r\n    if(props.appName=='CFD'){\r\n        const cfd={ \r\n        cfd_name: 'CFD',\r\n        cfd_threads: cfd_threads\r\n        };\r\n        props.onExecuteEvent(cfd); \r\n    }\r\n\r\n    else if(props.appName=='LavaMD'){\r\n        const lavaMD={ \r\n        lava_name: 'LavaMD',\r\n        lava_workloads:' -boxes1d '+ boxes\r\n        };\r\n        props.onExecuteEvent(lavaMD); \r\n    }\r\n\r\n    else if(props.appName=='Particle Filter'){\r\n        const particle={ \r\n        filter_name: 'Particle Filter',\r\n        filter_workloads: ' -x ' + width + ' -y ' + height + ' -z ' + nfr + ' -np ' + np\r\n        };\r\n        props.onExecuteEvent(particle); \r\n    }\r\n\r\n    else if(props.appName=='Srad'){\r\n        const srad={ \r\n        srad_name: 'Srad',\r\n        srad_workloads: String(niter) + ' ' + String(lambda) + ' ' +  String(nr)+ ' ' + String(nc)\r\n        };\r\n        props.onExecuteEvent(srad); \r\n    }\r\n\r\n    else if(props.appName=='Lud'){\r\n        const lud={ \r\n        lud_name: 'Lud',\r\n        lud_workloads: ' -s ' + matrixSize ,\r\n        lud_threads: lud_threads\r\n        };\r\n        props.onExecuteEvent(lud); \r\n    } \r\n    }, [props.refresh ,userData, cfd_threads, niter, lambda, nc, nr, width, height, nfr, np, matrixSize, lud_threads, boxes]);\r\n    \r\n\r\n\r\n  return (\r\n    <div className='app-style'>\r\n        <label>\r\n      <input type=\"checkbox\" checked={isChecked} onChange={handleCheckboxChange}/>{props.appName}\r\n      </label>\r\n      <div className='text-style'>\r\n        \r\n        { isChecked && (props.appName == 'BFS') && (\r\n            <>\r\n            <label>Workloads files:</label>\r\n            <DynamicCheckbox itemsURL={props.itemsURL} appName={'BFS'} onExecuteEvent = {executeHandler}/>\r\n            </>\r\n        )}\r\n\r\n        { isChecked && (props.appName == 'CFD') && (\r\n        <>\r\n            <label>Workloads files:</label>\r\n            <DynamicCheckbox itemsURL={props.itemsURL} appName={'CFD'} onExecuteEvent = {executeHandler}/>\r\n            <div >\r\n                <label>Threads per block</label>\r\n                <input type='number' className='input-style' value={cfd_threads} onChange={e => set_cfd_Threads(e.target.value)}></input>\r\n            </div>\r\n        </>\r\n        )}\r\n\r\n        {isChecked && (props.appName == 'LavaMD') && (\r\n        <>\r\n            <div>\r\n                <label>Number of boxes</label>\r\n                <input type='number' className='input-style' value={boxes} onChange={e => setBoxes(e.target.value)}></input>\r\n            </div>\r\n        </>\r\n        )}\r\n\r\n        {isChecked && (props.appName == 'Particle Filter') && (\r\n            <>\r\n                <div>\r\n                    <label>Width</label>\r\n                    <input type='number' className='input-style' value={width} onChange={e => setWidth(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Height</label>\r\n                    <input type='number' className='input-style' value={height} onChange={e => setHeight(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of frames</label>\r\n                    <input type='number' className='input-style' value={nfr} onChange={e => setNfr(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of particles</label>\r\n                    <input type='number' className='input-style' value={np} onChange={e => setNp(e.target.value)}></input>\r\n                </div>\r\n            </>\r\n        )}\r\n\r\n        {isChecked && (props.appName == 'Srad') && (\r\n            <>\r\n                <div>\r\n                    <label>Algorithm iterations in the image</label>\r\n                    <input type='number' className='input-style' value={niter} onChange={e => setNiter(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Amount of diffusion</label>\r\n                    <input type='number' step=\"0.01\" className='input-style' value={lambda} onChange={e => setLambda(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of rows</label>\r\n                    <input type='number' className='input-style' value={nr} onChange={e => setNr(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of columns</label>\r\n                    <input type='number' className='input-style' value={nc} onChange={e => setNc(e.target.value)}></input>\r\n                </div>\r\n            </>\r\n        )}\r\n\r\n\r\n        {isChecked && (props.appName == 'Lud') && (\r\n            <>\r\n                <div>\r\n                    <label>Matrix size</label>\r\n                    <input type='number' className='input-style' value={matrixSize} onChange={e => setMatrixSize(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Threads per block</label>\r\n                    <input type='number' className='input-style' value={lud_threads} onChange={e => set_lud_threads(e.target.value)}></input>\r\n                </div>\r\n            </>\r\n        )}\r\n      </div>\r\n      \r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppComponent;\r\n","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\PopUp.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\MainView\\MainView.js",["205","206"],[],"import Navbar from \"../UI/Navbar\";\r\nimport ExecutionView from \"../Request-Execution/ExecutionView\";\r\nimport MonitoringView from \"../Monitoring/MonitoringView\";\r\n\r\n\r\nimport React, {useState } from 'react';\r\n\r\n\r\nfunction MainView(props) {\r\n\r\n    const [showMonitoring, setShowMonitoring] = useState(false);\r\n\r\n    //Options: Succed, Failed, InProgress, Paused\r\n    const [executingState, setExecutingState] = useState('Paused')\r\n\r\n    const handleView = (viewFlag) =>{\r\n        setShowMonitoring(viewFlag);\r\n        console.log(props.gpu_dataURL)\r\n    }\r\n\r\n    const handleExecState = (exec_state) =>{\r\n        setExecutingState(exec_state);\r\n    }\r\n\r\n\r\n    return (\r\n      <div>\r\n        <Navbar/>\r\n        {\r\n            showMonitoring == false  && (\r\n                <>\r\n                <ExecutionView cfd_workloadsURL={props.cfd_workloadsURL} bfs_workloadsURL={props.bfs_workloadsURL} \r\n                      executionURL={props.executionURL} frequenciesURL={props.frequenciesURL} setView={handleView} \r\n                      setExecState={handleExecState}/>\r\n                </>\r\n            ) \r\n        }\r\n        {\r\n            showMonitoring == true && (\r\n                <> \r\n                <MonitoringView resultsFileURL={props.resultsFileURL} setView={handleView} currentAppsURL={props.currentAppsURL} \r\n                getExecState={executingState} gpu_dataURL={props.gpu_dataURL}/>\r\n                </>\r\n            )\r\n        }\r\n        \r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default MainView;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Monitoring\\MonitoringView.js",["207","208"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Monitoring\\MyChart.js",[],[],{"ruleId":"209","replacedBy":"210"},{"ruleId":"211","severity":1,"message":"212","line":4,"column":8,"nodeType":"213","messageId":"214","endLine":4,"endColumn":23},{"ruleId":"211","severity":1,"message":"215","line":8,"column":8,"nodeType":"213","messageId":"214","endLine":8,"endColumn":17},{"ruleId":"211","severity":1,"message":"216","line":12,"column":11,"nodeType":"213","messageId":"214","endLine":12,"endColumn":21},{"ruleId":"211","severity":1,"message":"217","line":14,"column":11,"nodeType":"213","messageId":"214","endLine":14,"endColumn":15},{"ruleId":"211","severity":1,"message":"218","line":17,"column":12,"nodeType":"213","messageId":"214","endLine":17,"endColumn":23},{"ruleId":"219","severity":1,"message":"220","line":25,"column":12,"nodeType":"221","endLine":25,"endColumn":27,"suggestions":"222"},{"ruleId":"219","severity":1,"message":"223","line":34,"column":6,"nodeType":"221","endLine":34,"endColumn":8,"suggestions":"224"},{"ruleId":"219","severity":1,"message":"220","line":52,"column":6,"nodeType":"221","endLine":52,"endColumn":22,"suggestions":"225"},{"ruleId":"211","severity":1,"message":"226","line":8,"column":12,"nodeType":"213","messageId":"214","endLine":8,"endColumn":17},{"ruleId":"227","severity":1,"message":"228","line":47,"column":24,"nodeType":"229","messageId":"230","endLine":47,"endColumn":26},{"ruleId":"227","severity":1,"message":"228","line":54,"column":24,"nodeType":"229","messageId":"230","endLine":54,"endColumn":26},{"ruleId":"219","severity":1,"message":"220","line":61,"column":10,"nodeType":"221","endLine":61,"endColumn":44,"suggestions":"231"},{"ruleId":"227","severity":1,"message":"228","line":66,"column":26,"nodeType":"229","messageId":"230","endLine":66,"endColumn":28},{"ruleId":"227","severity":1,"message":"228","line":80,"column":26,"nodeType":"229","messageId":"230","endLine":80,"endColumn":28},{"ruleId":"211","severity":1,"message":"232","line":8,"column":12,"nodeType":"213","messageId":"214","endLine":8,"endColumn":26},{"ruleId":"227","severity":1,"message":"228","line":26,"column":21,"nodeType":"229","messageId":"230","endLine":26,"endColumn":23},{"ruleId":"227","severity":1,"message":"228","line":33,"column":21,"nodeType":"229","messageId":"230","endLine":33,"endColumn":23},{"ruleId":"227","severity":1,"message":"228","line":40,"column":26,"nodeType":"229","messageId":"230","endLine":40,"endColumn":28},{"ruleId":"219","severity":1,"message":"220","line":46,"column":10,"nodeType":"221","endLine":46,"endColumn":22,"suggestions":"233"},{"ruleId":"211","severity":1,"message":"234","line":7,"column":11,"nodeType":"213","messageId":"214","endLine":7,"endColumn":20},{"ruleId":"227","severity":1,"message":"228","line":31,"column":27,"nodeType":"229","messageId":"230","endLine":31,"endColumn":29},{"ruleId":"227","severity":1,"message":"228","line":37,"column":32,"nodeType":"229","messageId":"230","endLine":37,"endColumn":34},{"ruleId":"211","severity":1,"message":"235","line":46,"column":11,"nodeType":"213","messageId":"214","endLine":46,"endColumn":23},{"ruleId":"227","severity":1,"message":"228","line":59,"column":21,"nodeType":"229","messageId":"230","endLine":59,"endColumn":23},{"ruleId":"227","severity":1,"message":"228","line":67,"column":26,"nodeType":"229","messageId":"230","endLine":67,"endColumn":28},{"ruleId":"227","severity":1,"message":"228","line":75,"column":26,"nodeType":"229","messageId":"230","endLine":75,"endColumn":28},{"ruleId":"227","severity":1,"message":"228","line":83,"column":26,"nodeType":"229","messageId":"230","endLine":83,"endColumn":28},{"ruleId":"227","severity":1,"message":"228","line":91,"column":26,"nodeType":"229","messageId":"230","endLine":91,"endColumn":28},{"ruleId":"219","severity":1,"message":"220","line":99,"column":8,"nodeType":"221","endLine":99,"endColumn":110,"suggestions":"236"},{"ruleId":"227","severity":1,"message":"228","line":110,"column":39,"nodeType":"229","messageId":"230","endLine":110,"endColumn":41},{"ruleId":"227","severity":1,"message":"228","line":117,"column":39,"nodeType":"229","messageId":"230","endLine":117,"endColumn":41},{"ruleId":"227","severity":1,"message":"228","line":128,"column":38,"nodeType":"229","messageId":"230","endLine":128,"endColumn":40},{"ruleId":"227","severity":1,"message":"228","line":137,"column":38,"nodeType":"229","messageId":"230","endLine":137,"endColumn":40},{"ruleId":"227","severity":1,"message":"228","line":161,"column":38,"nodeType":"229","messageId":"230","endLine":161,"endColumn":40},{"ruleId":"227","severity":1,"message":"228","line":186,"column":38,"nodeType":"229","messageId":"230","endLine":186,"endColumn":40},{"ruleId":"209","replacedBy":"237"},{"ruleId":"209","replacedBy":"238"},{"ruleId":"219","severity":1,"message":"220","line":70,"column":8,"nodeType":"221","endLine":70,"endColumn":24,"suggestions":"239"},{"ruleId":"219","severity":1,"message":"223","line":34,"column":6,"nodeType":"221","endLine":34,"endColumn":8,"suggestions":"240"},{"ruleId":"227","severity":1,"message":"228","line":42,"column":22,"nodeType":"229","messageId":"230","endLine":42,"endColumn":24},{"ruleId":"219","severity":1,"message":"220","line":57,"column":6,"nodeType":"221","endLine":57,"endColumn":37,"suggestions":"241"},{"ruleId":"219","severity":1,"message":"220","line":30,"column":12,"nodeType":"221","endLine":30,"endColumn":42,"suggestions":"242"},{"ruleId":"211","severity":1,"message":"232","line":8,"column":12,"nodeType":"213","messageId":"214","endLine":8,"endColumn":26},{"ruleId":"227","severity":1,"message":"228","line":26,"column":21,"nodeType":"229","messageId":"230","endLine":26,"endColumn":23},{"ruleId":"227","severity":1,"message":"228","line":33,"column":21,"nodeType":"229","messageId":"230","endLine":33,"endColumn":23},{"ruleId":"227","severity":1,"message":"228","line":40,"column":26,"nodeType":"229","messageId":"230","endLine":40,"endColumn":28},{"ruleId":"219","severity":1,"message":"220","line":46,"column":10,"nodeType":"221","endLine":46,"endColumn":22,"suggestions":"243"},{"ruleId":"211","severity":1,"message":"226","line":8,"column":12,"nodeType":"213","messageId":"214","endLine":8,"endColumn":17},{"ruleId":"227","severity":1,"message":"228","line":52,"column":24,"nodeType":"229","messageId":"230","endLine":52,"endColumn":26},{"ruleId":"227","severity":1,"message":"228","line":59,"column":24,"nodeType":"229","messageId":"230","endLine":59,"endColumn":26},{"ruleId":"219","severity":1,"message":"220","line":66,"column":10,"nodeType":"221","endLine":66,"endColumn":59,"suggestions":"244"},{"ruleId":"227","severity":1,"message":"228","line":71,"column":26,"nodeType":"229","messageId":"230","endLine":71,"endColumn":28},{"ruleId":"227","severity":1,"message":"228","line":85,"column":26,"nodeType":"229","messageId":"230","endLine":85,"endColumn":28},{"ruleId":"227","severity":1,"message":"228","line":30,"column":27,"nodeType":"229","messageId":"230","endLine":30,"endColumn":29},{"ruleId":"227","severity":1,"message":"228","line":36,"column":32,"nodeType":"229","messageId":"230","endLine":36,"endColumn":34},{"ruleId":"211","severity":1,"message":"235","line":45,"column":11,"nodeType":"213","messageId":"214","endLine":45,"endColumn":23},{"ruleId":"227","severity":1,"message":"228","line":56,"column":23,"nodeType":"229","messageId":"230","endLine":56,"endColumn":25},{"ruleId":"227","severity":1,"message":"228","line":72,"column":21,"nodeType":"229","messageId":"230","endLine":72,"endColumn":23},{"ruleId":"227","severity":1,"message":"228","line":80,"column":26,"nodeType":"229","messageId":"230","endLine":80,"endColumn":28},{"ruleId":"227","severity":1,"message":"228","line":88,"column":26,"nodeType":"229","messageId":"230","endLine":88,"endColumn":28},{"ruleId":"227","severity":1,"message":"228","line":96,"column":26,"nodeType":"229","messageId":"230","endLine":96,"endColumn":28},{"ruleId":"227","severity":1,"message":"228","line":104,"column":26,"nodeType":"229","messageId":"230","endLine":104,"endColumn":28},{"ruleId":"219","severity":1,"message":"220","line":112,"column":8,"nodeType":"221","endLine":112,"endColumn":125,"suggestions":"245"},{"ruleId":"227","severity":1,"message":"228","line":123,"column":39,"nodeType":"229","messageId":"230","endLine":123,"endColumn":41},{"ruleId":"227","severity":1,"message":"228","line":130,"column":39,"nodeType":"229","messageId":"230","endLine":130,"endColumn":41},{"ruleId":"227","severity":1,"message":"228","line":141,"column":38,"nodeType":"229","messageId":"230","endLine":141,"endColumn":40},{"ruleId":"227","severity":1,"message":"228","line":150,"column":38,"nodeType":"229","messageId":"230","endLine":150,"endColumn":40},{"ruleId":"227","severity":1,"message":"228","line":174,"column":38,"nodeType":"229","messageId":"230","endLine":174,"endColumn":40},{"ruleId":"227","severity":1,"message":"228","line":199,"column":38,"nodeType":"229","messageId":"230","endLine":199,"endColumn":40},{"ruleId":"227","severity":1,"message":"228","line":30,"column":28,"nodeType":"229","messageId":"230","endLine":30,"endColumn":30},{"ruleId":"227","severity":1,"message":"228","line":39,"column":28,"nodeType":"229","messageId":"230","endLine":39,"endColumn":30},{"ruleId":"211","severity":1,"message":"226","line":7,"column":12,"nodeType":"213","messageId":"214","endLine":7,"endColumn":17},{"ruleId":"219","severity":1,"message":"246","line":107,"column":8,"nodeType":"221","endLine":107,"endColumn":78,"suggestions":"247"},"no-new-object",["248"],"no-unused-vars","'DynamicCheckbox' is defined but never used.","Identifier","unusedVar","'TextInput' is defined but never used.","'freqString' is assigned a value but never used.","'freq' is assigned a value but never used.","'refreshFlag' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["249"],"React Hook useEffect has a missing dependency: 'props.itemsURL'. Either include it or remove the dependency array.",["250"],["251"],"'error' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["252"],"'selectedNumber' is assigned a value but never used.",["253"],"'workloads' is assigned a value but never used.","'handleChange' is assigned a value but never used.",["254"],["248"],["248"],["255"],["256"],["257"],["258"],["259"],["260"],["261"],"React Hook useEffect has missing dependencies: 'fetch_AppsInUse' and 'fetch_GPUData'. Either include them or remove the dependency array.",["262"],"no-object-constructor",{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"265","fix":"277"},{"desc":"278","fix":"279"},{"desc":"280","fix":"281"},{"desc":"271","fix":"282"},{"desc":"283","fix":"284"},{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},"Update the dependencies array to be: [executionFlag, props]",{"range":"289","text":"290"},"Update the dependencies array to be: [props.itemsURL]",{"range":"291","text":"292"},"Update the dependencies array to be: [props, selectedOption]",{"range":"293","text":"294"},"Update the dependencies array to be: [props, selectedFrequency, selectedNumber]",{"range":"295","text":"296"},"Update the dependencies array to be: [inputValue, props]",{"range":"297","text":"298"},"Update the dependencies array to be: [userData, cfd_threads, niter, lambda, nc, nr, width, height, nfr, np, matrixSize, lud_threads, boxes, props]",{"range":"299","text":"300"},"Update the dependencies array to be: [MonitoringFlag, props]",{"range":"301","text":"302"},{"range":"303","text":"292"},"Update the dependencies array to be: [props, props.refresh, selectedOption]",{"range":"304","text":"305"},"Update the dependencies array to be: [props.refresh, executionFlag, props]",{"range":"306","text":"307"},{"range":"308","text":"298"},"Update the dependencies array to be: [props, props.refresh, selectedFrequency, selectedNumber]",{"range":"309","text":"310"},"Update the dependencies array to be: [props.refresh, userData, cfd_threads, niter, lambda, nc, nr, width, height, nfr, np, matrixSize, lud_threads, boxes, props]",{"range":"311","text":"312"},"Update the dependencies array to be: [props.currentAppsURL, currentApps, props.getExecState, props.gpuData, fetch_AppsInUse, fetch_GPUData]",{"range":"313","text":"314"},[746,761],"[executionFlag, props]",[981,983],"[props.itemsURL]",[1623,1639],"[props, selectedOption]",[1708,1742],"[props, selectedFrequency, selectedNumber]",[1203,1215],"[inputValue, props]",[3020,3122],"[userData, cfd_threads, niter, lambda, nc, nr, width, height, nfr, np, matrixSize, lud_threads, boxes, props]",[1913,1929],"[MonitoringFlag, props]",[981,983],[1702,1733],"[props, props.refresh, selectedOption]",[845,875],"[props.refresh, executionFlag, props]",[1203,1215],[1822,1871],"[props, props.refresh, selectedFrequency, selectedNumber]",[3338,3455],"[props.refresh, userData, cfd_threads, niter, lambda, nc, nr, width, height, nfr, np, matrixSize, lud_threads, boxes, props]",[3365,3435],"[props.currentAppsURL, currentApps, props.getExecState, props.gpuData, fetch_AppsInUse, fetch_GPUData]"]