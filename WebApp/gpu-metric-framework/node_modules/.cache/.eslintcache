[{"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\index.js":"1","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\App.js":"2","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Card.js":"3","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\ExecutionView.js":"4","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Navbar.js":"5","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\StaticCheckbox.js":"6","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\DynamicCheckbox.js":"7","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\Dropdown.js":"8","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\TextInput.js":"9","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Apps\\AppComponent.js":"10","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\index.js":"11","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\App.js":"12","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\ExecutionView.js":"13","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Navbar.js":"14","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\DynamicCheckbox.js":"15","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\StaticCheckbox.js":"16","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\TextInput.js":"17","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Card.js":"18","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\Dropdown.js":"19","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Apps\\AppComponent.js":"20","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\PopUp.js":"21"},{"size":216,"mtime":1695751156443,"results":"22","hashOfConfig":"23"},{"size":733,"mtime":1698272315918,"results":"24","hashOfConfig":"23"},{"size":187,"mtime":1695751156438,"results":"25","hashOfConfig":"23"},{"size":4385,"mtime":1698269703543,"results":"26","hashOfConfig":"23"},{"size":264,"mtime":1698200175697,"results":"27","hashOfConfig":"23"},{"size":1621,"mtime":1695794812252,"results":"28","hashOfConfig":"23"},{"size":2873,"mtime":1698217616423,"results":"29","hashOfConfig":"23"},{"size":2840,"mtime":1698272621129,"results":"30","hashOfConfig":"23"},{"size":1569,"mtime":1698217997513,"results":"31","hashOfConfig":"23"},{"size":7101,"mtime":1698217720803,"results":"32","hashOfConfig":"23"},{"size":216,"mtime":1698357842807,"results":"33","hashOfConfig":"34"},{"size":715,"mtime":1698358307907,"results":"35","hashOfConfig":"34"},{"size":4967,"mtime":1698359963031,"results":"36","hashOfConfig":"34"},{"size":264,"mtime":1698357842807,"results":"37","hashOfConfig":"34"},{"size":2967,"mtime":1698359107714,"results":"38","hashOfConfig":"34"},{"size":1735,"mtime":1698359093396,"results":"39","hashOfConfig":"34"},{"size":1569,"mtime":1698357842805,"results":"40","hashOfConfig":"34"},{"size":187,"mtime":1698357842805,"results":"41","hashOfConfig":"34"},{"size":2969,"mtime":1698359078447,"results":"42","hashOfConfig":"34"},{"size":7454,"mtime":1698359123330,"results":"43","hashOfConfig":"34"},{"size":538,"mtime":1698360688796,"results":"44","hashOfConfig":"34"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1f1td20",{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fadv2y",{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\index.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\App.js",[],[],["114"],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Card.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\ExecutionView.js",["115","116","117","118","119"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Navbar.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\StaticCheckbox.js",["120"],[],"import './StaticCheckbox.css';\r\nimport React, {useState, useEffect} from 'react';\r\n\r\nconst StaticCheckbox = (props) =>{\r\n\r\n    const [executionFlag, setExecutionFlag] = useState(false);\r\n\r\n    const handleCheckboxChange = (event) =>{\r\n        const id = event.target.id;\r\n\r\n        // If the clicked checkbox is already checked, uncheck it\r\n        if (id === executionFlag) {\r\n        setExecutionFlag(null);\r\n        } else {\r\n        setExecutionFlag(id); // Otherwise, check the clicked checkbox\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        // This code will run after the state has been updated\r\n        const executionType={ \r\n          execType: executionFlag\r\n        };\r\n        props.onExecuteEvent(executionType);  \r\n        }, [executionFlag]);\r\n\r\n    return(\r\n        <div>\r\n            <div className='checkbox-margin'>\r\n                <label  className='form-control'>\r\n                    <input\r\n                        id='simult'\r\n                        type='checkbox'\r\n                        checked= {executionFlag === 'simult'}\r\n                        onChange={handleCheckboxChange}\r\n                    />Simultaneous\r\n                </label> \r\n                <label className='form-control'>\r\n                    <input\r\n                        id='not-simult'\r\n                        type='checkbox'\r\n                        checked={executionFlag === 'not-simult'}\r\n                        onChange={handleCheckboxChange}\r\n                    />Not Simultaneous\r\n                </label> \r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default StaticCheckbox;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\DynamicCheckbox.js",["121","122"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\Dropdown.js",["123","124","125","126","127","128"],[],"import React, { useState, useEffect } from 'react';\r\n\r\nimport './Dropdown.css';\r\n\r\nconst Dropdown = (props) => {\r\n\r\n    const [selectedNumber, setSelectedNumber] = useState('');\r\n    const [error, setError] = useState(null);\r\n    const [frequenciesOptions, setFrequenciesOptions] = useState('');\r\n    const [selectedFrequency, setSelectedFrequency] = useState('');\r\n\r\n    const handleSelectChange = (e) => {\r\n      setSelectedNumber(e.target.value);\r\n    };\r\n  \r\n    const numbers = Array.from({ length: 15 }, (_, i) => i + 1);\r\n\r\n\r\n    useEffect(() => {\r\n      if (props.injected === true) {\r\n        setError(null);\r\n        fetch(props.frequenciesURL, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'ngrok-skip-browser-warning': '1',\r\n          },\r\n        })\r\n          .then((response) => {\r\n            if (!response.ok) {\r\n              throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n            return response.json();\r\n          })\r\n          .then((data) => {\r\n            setFrequenciesOptions(data);\r\n          })\r\n          .catch((error) => {\r\n            setError(error.message);\r\n          });\r\n      }\r\n    }, [props.injected, props.frequenciesURL, props.frequenciesOptions]);\r\n\r\n    \r\n    useEffect(() => {\r\n      // This code will run after the state has been updated\r\n      if(props.injected== false){\r\n        const execNum={ \r\n          execNum: selectedNumber\r\n        };\r\n        props.onExecuteEvent(execNum); \r\n      }\r\n      \r\n      if(props.injected== true){\r\n        const freq={ \r\n          freq:selectedFrequency\r\n        };\r\n        props.onExecuteEvent(freq); \r\n      }\r\n\r\n      }, [selectedFrequency,selectedNumber]);\r\n\r\n  \r\n    return (\r\n      <div>\r\n        {(props.injected == false) && (\r\n          <div>\r\n          <select className='select' onChange={handleSelectChange} value={selectedNumber}>\r\n            <option value=\"\">Select a number</option>\r\n            {numbers.map((number) => (\r\n              <option key={number} value={number}>\r\n                {number}\r\n              </option>\r\n            ))}\r\n          </select>\r\n\r\n          </div>\r\n        )}\r\n\r\n        {(props.injected == true) && frequenciesOptions && (          \r\n            <div>\r\n            <select\r\n              className=\"select\"\r\n              onChange={(e) => setSelectedFrequency(e.target.value)}\r\n              value={selectedFrequency}\r\n            >\r\n              <option value=\"\">Select a frequency</option>\r\n              {frequenciesOptions.map((frequency) => (\r\n                <option key={frequency} value={frequency}>\r\n                  {frequency}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        )}\r\n        \r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Dropdown;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\TextInput.js",["129","130","131","132","133"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Apps\\AppComponent.js",["134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149"],[],"import React, { useState, useEffect  } from 'react';\r\nimport DynamicCheckbox from '../Request-Execution/DynamicCheckbox';\r\nimport './AppComponents.css';\r\n\r\nconst AppComponent = (props) => {\r\n  \r\n    const workloads = 'workloads';\r\n    let userData={}\r\n\r\n    const [isChecked, setIsChecked] = useState(false);\r\n\r\n    //Constants to save inputs values\r\n    const [cfd_threads, set_cfd_Threads] = useState('');\r\n    const [niter, setNiter] = useState('');\r\n    const [lambda, setLambda] = useState('');\r\n    const [nc, setNc] = useState('');\r\n    const [nr, setNr] = useState('');\r\n    const [width, setWidth] = useState('');\r\n    const [height, setHeight] = useState('');\r\n    const [nfr, setNfr] = useState('');\r\n    const [np, setNp] = useState('');\r\n    const [matrixSize, setMatrixSize] = useState('');\r\n    const [lud_threads, set_lud_threads] = useState('');\r\n    const [boxes, setBoxes] = useState('');\r\n\r\n    const executeHandler = ( enteredUserData ) => {\r\n        userData = {\r\n            ...userData, // Keep the existing data in userData\r\n            ...enteredUserData, // Add the data from enteredUserData\r\n        };\r\n        if (props.appName == 'CFD'){\r\n            const cfdApp={\r\n                cfd_workloads : userData.cfd_workload\r\n            }\r\n            props.onExecuteEvent(cfdApp);\r\n        }\r\n        else if (props.appName == 'BFS'){\r\n            const bfs = {\r\n                bfs_name:'BFS',\r\n                bfs_workloads : userData.bfs_workload\r\n            }\r\n            props.onExecuteEvent(bfs);\r\n        }\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        props.updateData(event.target.value);\r\n    }\r\n\r\n    const handleCheckboxChange = () => {\r\n        setIsChecked(prevState => !prevState); // Invierte el valor de isChecked\r\n    };\r\n\r\n    //Sending data the the parent\r\n    useEffect(() => {\r\n    // This code will run after the state has been updated\r\n\r\n\r\n    if(props.appName=='CFD'){\r\n        const cfd={ \r\n        cfd_name: 'CFD',\r\n        cfd_threads: cfd_threads\r\n        };\r\n        props.onExecuteEvent(cfd); \r\n    }\r\n\r\n    else if(props.appName=='LavaMD'){\r\n        const lavaMD={ \r\n        lava_name: 'LavaMD',\r\n        lava_workloads:' -boxes1d '+ boxes\r\n        };\r\n        props.onExecuteEvent(lavaMD); \r\n    }\r\n\r\n    else if(props.appName=='Particle Filter'){\r\n        const particle={ \r\n        filter_name: 'Particle Filter',\r\n        filter_workloads: ' -x ' + width + ' -y ' + height + ' -z ' + nfr + ' -np ' + np\r\n        };\r\n        props.onExecuteEvent(particle); \r\n    }\r\n\r\n    else if(props.appName=='Srad'){\r\n        const srad={ \r\n        srad_name: 'Srad',\r\n        srad_workloads: String(niter) + ' ' + String(lambda) + ' ' +  String(nr)+ ' ' + String(nc)\r\n        };\r\n        props.onExecuteEvent(srad); \r\n    }\r\n\r\n    else if(props.appName=='Lud'){\r\n        const lud={ \r\n        lud_name: 'Lud',\r\n        lud_workloads: ' -s ' + matrixSize ,\r\n        lud_threads: lud_threads\r\n        };\r\n        props.onExecuteEvent(lud); \r\n    } \r\n    }, [userData, cfd_threads, niter, lambda, nc, nr, width, height, nfr, np, matrixSize, lud_threads, boxes]);\r\n    \r\n\r\n\r\n  return (\r\n    <div className='app-style'>\r\n        <label>\r\n      <input type=\"checkbox\" onChange={handleCheckboxChange}/>{props.appName}\r\n      </label>\r\n      <div className='text-style'>\r\n        \r\n        { isChecked && (props.appName == 'BFS') && (\r\n            <>\r\n            <label>Workloads files:</label>\r\n            <DynamicCheckbox itemsURL={props.itemsURL} appName={'BFS'} onExecuteEvent = {executeHandler}/>\r\n            </>\r\n        )}\r\n\r\n        { isChecked && (props.appName == 'CFD') && (\r\n        <>\r\n            <label>Workloads files:</label>\r\n            <DynamicCheckbox itemsURL={props.itemsURL} appName={'CFD'} onExecuteEvent = {executeHandler}/>\r\n            <div >\r\n                <label>Threads per block</label>\r\n                <input type='number' className='input-style' value={cfd_threads} onChange={e => set_cfd_Threads(e.target.value)}></input>\r\n            </div>\r\n        </>\r\n        )}\r\n\r\n        {isChecked && (props.appName == 'LavaMD') && (\r\n        <>\r\n            <div>\r\n                <label>Number of boxes</label>\r\n                <input type='number' className='input-style' value={boxes} onChange={e => setBoxes(e.target.value)}></input>\r\n            </div>\r\n        </>\r\n        )}\r\n\r\n        {isChecked && (props.appName == 'Particle Filter') && (\r\n            <>\r\n                <div>\r\n                    <label>Width</label>\r\n                    <input type='number' className='input-style' value={width} onChange={e => setWidth(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Height</label>\r\n                    <input type='number' className='input-style' value={height} onChange={e => setHeight(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of frames</label>\r\n                    <input type='number' className='input-style' value={nfr} onChange={e => setNfr(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of particles</label>\r\n                    <input type='number' className='input-style' value={np} onChange={e => setNp(e.target.value)}></input>\r\n                </div>\r\n            </>\r\n        )}\r\n\r\n        {isChecked && (props.appName == 'Srad') && (\r\n            <>\r\n                <div>\r\n                    <label>Algorithm iterations in the image</label>\r\n                    <input type='number' className='input-style' value={niter} onChange={e => setNiter(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Amount of diffusion</label>\r\n                    <input type='number' step=\"0.01\" className='input-style' value={lambda} onChange={e => setLambda(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of rows</label>\r\n                    <input type='number' className='input-style' value={nr} onChange={e => setNr(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of columns</label>\r\n                    <input type='number' className='input-style' value={nc} onChange={e => setNc(e.target.value)}></input>\r\n                </div>\r\n            </>\r\n        )}\r\n\r\n\r\n        {isChecked && (props.appName == 'Lud') && (\r\n            <>\r\n                <div>\r\n                    <label>Matrix size</label>\r\n                    <input type='number' className='input-style' value={matrixSize} onChange={e => setMatrixSize(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Threads per block</label>\r\n                    <input type='number' className='input-style' value={lud_threads} onChange={e => set_lud_threads(e.target.value)}></input>\r\n                </div>\r\n            </>\r\n        )}\r\n      </div>\r\n      \r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppComponent;\r\n",["150"],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\index.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\App.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\ExecutionView.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Navbar.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\DynamicCheckbox.js",["151","152","153"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\StaticCheckbox.js",["154"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\TextInput.js",["155","156","157","158","159"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Card.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\Dropdown.js",["160","161","162","163","164","165"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Apps\\AppComponent.js",["166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181"],[],"import React, { useState, useEffect  } from 'react';\r\nimport DynamicCheckbox from '../Request-Execution/DynamicCheckbox';\r\nimport './AppComponents.css';\r\n\r\nconst AppComponent = (props) => {\r\n  \r\n    let userData={}\r\n\r\n    const [isChecked, setIsChecked] = useState(false);\r\n\r\n    //Constants to save inputs values\r\n    const [cfd_threads, set_cfd_Threads] = useState('');\r\n    const [niter, setNiter] = useState('');\r\n    const [lambda, setLambda] = useState('');\r\n    const [nc, setNc] = useState('');\r\n    const [nr, setNr] = useState('');\r\n    const [width, setWidth] = useState('');\r\n    const [height, setHeight] = useState('');\r\n    const [nfr, setNfr] = useState('');\r\n    const [np, setNp] = useState('');\r\n    const [matrixSize, setMatrixSize] = useState('');\r\n    const [lud_threads, set_lud_threads] = useState('');\r\n    const [boxes, setBoxes] = useState('');\r\n\r\n    const executeHandler = ( enteredUserData ) => {\r\n        userData = {\r\n            ...userData, // Keep the existing data in userData\r\n            ...enteredUserData, // Add the data from enteredUserData\r\n        };\r\n        if (props.appName == 'CFD'){\r\n            const cfdApp={\r\n                cfd_workloads : userData.cfd_workload\r\n            }\r\n            props.onExecuteEvent(cfdApp);\r\n        }\r\n        else if (props.appName == 'BFS'){\r\n            const bfs = {\r\n                bfs_name:'BFS',\r\n                bfs_workloads : userData.bfs_workload\r\n            }\r\n            props.onExecuteEvent(bfs);\r\n        }\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        props.updateData(event.target.value);\r\n    }\r\n\r\n    const handleCheckboxChange = () => {\r\n        setIsChecked(prevState => !prevState); // Invierte el valor de isChecked\r\n    };\r\n\r\n    //Sending data the the parent\r\n    useEffect(() => {\r\n    // This code will run after the state has been updated\r\n    if( props.refresh == true){\r\n        setIsChecked(false);\r\n        set_cfd_Threads('');\r\n        setNiter('');\r\n        setLambda('');\r\n        setNc('');\r\n        setNr('');\r\n        setWidth('');\r\n        setHeight('');\r\n        setNfr('');\r\n        setNp('');\r\n        setMatrixSize('');\r\n        set_lud_threads('');\r\n        setBoxes('');\r\n    }\r\n\r\n    if(props.appName=='CFD'){\r\n        const cfd={ \r\n        cfd_name: 'CFD',\r\n        cfd_threads: cfd_threads\r\n        };\r\n        props.onExecuteEvent(cfd); \r\n    }\r\n\r\n    else if(props.appName=='LavaMD'){\r\n        const lavaMD={ \r\n        lava_name: 'LavaMD',\r\n        lava_workloads:' -boxes1d '+ boxes\r\n        };\r\n        props.onExecuteEvent(lavaMD); \r\n    }\r\n\r\n    else if(props.appName=='Particle Filter'){\r\n        const particle={ \r\n        filter_name: 'Particle Filter',\r\n        filter_workloads: ' -x ' + width + ' -y ' + height + ' -z ' + nfr + ' -np ' + np\r\n        };\r\n        props.onExecuteEvent(particle); \r\n    }\r\n\r\n    else if(props.appName=='Srad'){\r\n        const srad={ \r\n        srad_name: 'Srad',\r\n        srad_workloads: String(niter) + ' ' + String(lambda) + ' ' +  String(nr)+ ' ' + String(nc)\r\n        };\r\n        props.onExecuteEvent(srad); \r\n    }\r\n\r\n    else if(props.appName=='Lud'){\r\n        const lud={ \r\n        lud_name: 'Lud',\r\n        lud_workloads: ' -s ' + matrixSize ,\r\n        lud_threads: lud_threads\r\n        };\r\n        props.onExecuteEvent(lud); \r\n    } \r\n    }, [props.refresh ,userData, cfd_threads, niter, lambda, nc, nr, width, height, nfr, np, matrixSize, lud_threads, boxes]);\r\n    \r\n\r\n\r\n  return (\r\n    <div className='app-style'>\r\n        <label>\r\n      <input type=\"checkbox\" checked={isChecked} onChange={handleCheckboxChange}/>{props.appName}\r\n      </label>\r\n      <div className='text-style'>\r\n        \r\n        { isChecked && (props.appName == 'BFS') && (\r\n            <>\r\n            <label>Workloads files:</label>\r\n            <DynamicCheckbox itemsURL={props.itemsURL} appName={'BFS'} onExecuteEvent = {executeHandler}/>\r\n            </>\r\n        )}\r\n\r\n        { isChecked && (props.appName == 'CFD') && (\r\n        <>\r\n            <label>Workloads files:</label>\r\n            <DynamicCheckbox itemsURL={props.itemsURL} appName={'CFD'} onExecuteEvent = {executeHandler}/>\r\n            <div >\r\n                <label>Threads per block</label>\r\n                <input type='number' className='input-style' value={cfd_threads} onChange={e => set_cfd_Threads(e.target.value)}></input>\r\n            </div>\r\n        </>\r\n        )}\r\n\r\n        {isChecked && (props.appName == 'LavaMD') && (\r\n        <>\r\n            <div>\r\n                <label>Number of boxes</label>\r\n                <input type='number' className='input-style' value={boxes} onChange={e => setBoxes(e.target.value)}></input>\r\n            </div>\r\n        </>\r\n        )}\r\n\r\n        {isChecked && (props.appName == 'Particle Filter') && (\r\n            <>\r\n                <div>\r\n                    <label>Width</label>\r\n                    <input type='number' className='input-style' value={width} onChange={e => setWidth(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Height</label>\r\n                    <input type='number' className='input-style' value={height} onChange={e => setHeight(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of frames</label>\r\n                    <input type='number' className='input-style' value={nfr} onChange={e => setNfr(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of particles</label>\r\n                    <input type='number' className='input-style' value={np} onChange={e => setNp(e.target.value)}></input>\r\n                </div>\r\n            </>\r\n        )}\r\n\r\n        {isChecked && (props.appName == 'Srad') && (\r\n            <>\r\n                <div>\r\n                    <label>Algorithm iterations in the image</label>\r\n                    <input type='number' className='input-style' value={niter} onChange={e => setNiter(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Amount of diffusion</label>\r\n                    <input type='number' step=\"0.01\" className='input-style' value={lambda} onChange={e => setLambda(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of rows</label>\r\n                    <input type='number' className='input-style' value={nr} onChange={e => setNr(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of columns</label>\r\n                    <input type='number' className='input-style' value={nc} onChange={e => setNc(e.target.value)}></input>\r\n                </div>\r\n            </>\r\n        )}\r\n\r\n\r\n        {isChecked && (props.appName == 'Lud') && (\r\n            <>\r\n                <div>\r\n                    <label>Matrix size</label>\r\n                    <input type='number' className='input-style' value={matrixSize} onChange={e => setMatrixSize(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Threads per block</label>\r\n                    <input type='number' className='input-style' value={lud_threads} onChange={e => set_lud_threads(e.target.value)}></input>\r\n                </div>\r\n            </>\r\n        )}\r\n      </div>\r\n      \r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppComponent;\r\n","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\PopUp.js",["182"],[],{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","severity":1,"message":"186","line":4,"column":8,"nodeType":"187","messageId":"188","endLine":4,"endColumn":23},{"ruleId":"185","severity":1,"message":"189","line":8,"column":8,"nodeType":"187","messageId":"188","endLine":8,"endColumn":17},{"ruleId":"185","severity":1,"message":"190","line":12,"column":11,"nodeType":"187","messageId":"188","endLine":12,"endColumn":21},{"ruleId":"185","severity":1,"message":"191","line":14,"column":11,"nodeType":"187","messageId":"188","endLine":14,"endColumn":15},{"ruleId":"185","severity":1,"message":"192","line":17,"column":12,"nodeType":"187","messageId":"188","endLine":17,"endColumn":23},{"ruleId":"193","severity":1,"message":"194","line":25,"column":12,"nodeType":"195","endLine":25,"endColumn":27,"suggestions":"196"},{"ruleId":"193","severity":1,"message":"197","line":34,"column":6,"nodeType":"195","endLine":34,"endColumn":8,"suggestions":"198"},{"ruleId":"193","severity":1,"message":"194","line":52,"column":6,"nodeType":"195","endLine":52,"endColumn":22,"suggestions":"199"},{"ruleId":"185","severity":1,"message":"200","line":8,"column":12,"nodeType":"187","messageId":"188","endLine":8,"endColumn":17},{"ruleId":"201","severity":1,"message":"202","line":47,"column":24,"nodeType":"203","messageId":"204","endLine":47,"endColumn":26},{"ruleId":"201","severity":1,"message":"202","line":54,"column":24,"nodeType":"203","messageId":"204","endLine":54,"endColumn":26},{"ruleId":"193","severity":1,"message":"194","line":61,"column":10,"nodeType":"195","endLine":61,"endColumn":44,"suggestions":"205"},{"ruleId":"201","severity":1,"message":"202","line":66,"column":26,"nodeType":"203","messageId":"204","endLine":66,"endColumn":28},{"ruleId":"201","severity":1,"message":"202","line":80,"column":26,"nodeType":"203","messageId":"204","endLine":80,"endColumn":28},{"ruleId":"185","severity":1,"message":"206","line":8,"column":12,"nodeType":"187","messageId":"188","endLine":8,"endColumn":26},{"ruleId":"201","severity":1,"message":"202","line":26,"column":21,"nodeType":"203","messageId":"204","endLine":26,"endColumn":23},{"ruleId":"201","severity":1,"message":"202","line":33,"column":21,"nodeType":"203","messageId":"204","endLine":33,"endColumn":23},{"ruleId":"201","severity":1,"message":"202","line":40,"column":26,"nodeType":"203","messageId":"204","endLine":40,"endColumn":28},{"ruleId":"193","severity":1,"message":"194","line":46,"column":10,"nodeType":"195","endLine":46,"endColumn":22,"suggestions":"207"},{"ruleId":"185","severity":1,"message":"208","line":7,"column":11,"nodeType":"187","messageId":"188","endLine":7,"endColumn":20},{"ruleId":"201","severity":1,"message":"202","line":31,"column":27,"nodeType":"203","messageId":"204","endLine":31,"endColumn":29},{"ruleId":"201","severity":1,"message":"202","line":37,"column":32,"nodeType":"203","messageId":"204","endLine":37,"endColumn":34},{"ruleId":"185","severity":1,"message":"209","line":46,"column":11,"nodeType":"187","messageId":"188","endLine":46,"endColumn":23},{"ruleId":"201","severity":1,"message":"202","line":59,"column":21,"nodeType":"203","messageId":"204","endLine":59,"endColumn":23},{"ruleId":"201","severity":1,"message":"202","line":67,"column":26,"nodeType":"203","messageId":"204","endLine":67,"endColumn":28},{"ruleId":"201","severity":1,"message":"202","line":75,"column":26,"nodeType":"203","messageId":"204","endLine":75,"endColumn":28},{"ruleId":"201","severity":1,"message":"202","line":83,"column":26,"nodeType":"203","messageId":"204","endLine":83,"endColumn":28},{"ruleId":"201","severity":1,"message":"202","line":91,"column":26,"nodeType":"203","messageId":"204","endLine":91,"endColumn":28},{"ruleId":"193","severity":1,"message":"194","line":99,"column":8,"nodeType":"195","endLine":99,"endColumn":110,"suggestions":"210"},{"ruleId":"201","severity":1,"message":"202","line":110,"column":39,"nodeType":"203","messageId":"204","endLine":110,"endColumn":41},{"ruleId":"201","severity":1,"message":"202","line":117,"column":39,"nodeType":"203","messageId":"204","endLine":117,"endColumn":41},{"ruleId":"201","severity":1,"message":"202","line":128,"column":38,"nodeType":"203","messageId":"204","endLine":128,"endColumn":40},{"ruleId":"201","severity":1,"message":"202","line":137,"column":38,"nodeType":"203","messageId":"204","endLine":137,"endColumn":40},{"ruleId":"201","severity":1,"message":"202","line":161,"column":38,"nodeType":"203","messageId":"204","endLine":161,"endColumn":40},{"ruleId":"201","severity":1,"message":"202","line":186,"column":38,"nodeType":"203","messageId":"204","endLine":186,"endColumn":40},{"ruleId":"183","replacedBy":"211"},{"ruleId":"193","severity":1,"message":"197","line":34,"column":6,"nodeType":"195","endLine":34,"endColumn":8,"suggestions":"212"},{"ruleId":"201","severity":1,"message":"202","line":42,"column":22,"nodeType":"203","messageId":"204","endLine":42,"endColumn":24},{"ruleId":"193","severity":1,"message":"194","line":57,"column":6,"nodeType":"195","endLine":57,"endColumn":37,"suggestions":"213"},{"ruleId":"193","severity":1,"message":"194","line":30,"column":12,"nodeType":"195","endLine":30,"endColumn":42,"suggestions":"214"},{"ruleId":"185","severity":1,"message":"206","line":8,"column":12,"nodeType":"187","messageId":"188","endLine":8,"endColumn":26},{"ruleId":"201","severity":1,"message":"202","line":26,"column":21,"nodeType":"203","messageId":"204","endLine":26,"endColumn":23},{"ruleId":"201","severity":1,"message":"202","line":33,"column":21,"nodeType":"203","messageId":"204","endLine":33,"endColumn":23},{"ruleId":"201","severity":1,"message":"202","line":40,"column":26,"nodeType":"203","messageId":"204","endLine":40,"endColumn":28},{"ruleId":"193","severity":1,"message":"194","line":46,"column":10,"nodeType":"195","endLine":46,"endColumn":22,"suggestions":"215"},{"ruleId":"185","severity":1,"message":"200","line":8,"column":12,"nodeType":"187","messageId":"188","endLine":8,"endColumn":17},{"ruleId":"201","severity":1,"message":"202","line":52,"column":24,"nodeType":"203","messageId":"204","endLine":52,"endColumn":26},{"ruleId":"201","severity":1,"message":"202","line":59,"column":24,"nodeType":"203","messageId":"204","endLine":59,"endColumn":26},{"ruleId":"193","severity":1,"message":"194","line":66,"column":10,"nodeType":"195","endLine":66,"endColumn":59,"suggestions":"216"},{"ruleId":"201","severity":1,"message":"202","line":71,"column":26,"nodeType":"203","messageId":"204","endLine":71,"endColumn":28},{"ruleId":"201","severity":1,"message":"202","line":85,"column":26,"nodeType":"203","messageId":"204","endLine":85,"endColumn":28},{"ruleId":"201","severity":1,"message":"202","line":30,"column":27,"nodeType":"203","messageId":"204","endLine":30,"endColumn":29},{"ruleId":"201","severity":1,"message":"202","line":36,"column":32,"nodeType":"203","messageId":"204","endLine":36,"endColumn":34},{"ruleId":"185","severity":1,"message":"209","line":45,"column":11,"nodeType":"187","messageId":"188","endLine":45,"endColumn":23},{"ruleId":"201","severity":1,"message":"202","line":56,"column":23,"nodeType":"203","messageId":"204","endLine":56,"endColumn":25},{"ruleId":"201","severity":1,"message":"202","line":72,"column":21,"nodeType":"203","messageId":"204","endLine":72,"endColumn":23},{"ruleId":"201","severity":1,"message":"202","line":80,"column":26,"nodeType":"203","messageId":"204","endLine":80,"endColumn":28},{"ruleId":"201","severity":1,"message":"202","line":88,"column":26,"nodeType":"203","messageId":"204","endLine":88,"endColumn":28},{"ruleId":"201","severity":1,"message":"202","line":96,"column":26,"nodeType":"203","messageId":"204","endLine":96,"endColumn":28},{"ruleId":"201","severity":1,"message":"202","line":104,"column":26,"nodeType":"203","messageId":"204","endLine":104,"endColumn":28},{"ruleId":"193","severity":1,"message":"194","line":112,"column":8,"nodeType":"195","endLine":112,"endColumn":125,"suggestions":"217"},{"ruleId":"201","severity":1,"message":"202","line":123,"column":39,"nodeType":"203","messageId":"204","endLine":123,"endColumn":41},{"ruleId":"201","severity":1,"message":"202","line":130,"column":39,"nodeType":"203","messageId":"204","endLine":130,"endColumn":41},{"ruleId":"201","severity":1,"message":"202","line":141,"column":38,"nodeType":"203","messageId":"204","endLine":141,"endColumn":40},{"ruleId":"201","severity":1,"message":"202","line":150,"column":38,"nodeType":"203","messageId":"204","endLine":150,"endColumn":40},{"ruleId":"201","severity":1,"message":"202","line":174,"column":38,"nodeType":"203","messageId":"204","endLine":174,"endColumn":40},{"ruleId":"201","severity":1,"message":"202","line":199,"column":38,"nodeType":"203","messageId":"204","endLine":199,"endColumn":40},{"ruleId":"185","severity":1,"message":"218","line":1,"column":17,"nodeType":"187","messageId":"188","endLine":1,"endColumn":25},"no-new-object",["219"],"no-unused-vars","'DynamicCheckbox' is defined but never used.","Identifier","unusedVar","'TextInput' is defined but never used.","'freqString' is assigned a value but never used.","'freq' is assigned a value but never used.","'refreshFlag' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["220"],"React Hook useEffect has a missing dependency: 'props.itemsURL'. Either include it or remove the dependency array.",["221"],["222"],"'error' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["223"],"'selectedNumber' is assigned a value but never used.",["224"],"'workloads' is assigned a value but never used.","'handleChange' is assigned a value but never used.",["225"],["219"],["226"],["227"],["228"],["229"],["230"],["231"],"'useState' is defined but never used.","no-object-constructor",{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"234","fix":"244"},{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"240","fix":"249"},{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},"Update the dependencies array to be: [executionFlag, props]",{"range":"254","text":"255"},"Update the dependencies array to be: [props.itemsURL]",{"range":"256","text":"257"},"Update the dependencies array to be: [props, selectedOption]",{"range":"258","text":"259"},"Update the dependencies array to be: [props, selectedFrequency, selectedNumber]",{"range":"260","text":"261"},"Update the dependencies array to be: [inputValue, props]",{"range":"262","text":"263"},"Update the dependencies array to be: [userData, cfd_threads, niter, lambda, nc, nr, width, height, nfr, np, matrixSize, lud_threads, boxes, props]",{"range":"264","text":"265"},{"range":"266","text":"257"},"Update the dependencies array to be: [props, props.refresh, selectedOption]",{"range":"267","text":"268"},"Update the dependencies array to be: [props.refresh, executionFlag, props]",{"range":"269","text":"270"},{"range":"271","text":"263"},"Update the dependencies array to be: [props, props.refresh, selectedFrequency, selectedNumber]",{"range":"272","text":"273"},"Update the dependencies array to be: [props.refresh, userData, cfd_threads, niter, lambda, nc, nr, width, height, nfr, np, matrixSize, lud_threads, boxes, props]",{"range":"274","text":"275"},[746,761],"[executionFlag, props]",[981,983],"[props.itemsURL]",[1623,1639],"[props, selectedOption]",[1708,1742],"[props, selectedFrequency, selectedNumber]",[1203,1215],"[inputValue, props]",[3020,3122],"[userData, cfd_threads, niter, lambda, nc, nr, width, height, nfr, np, matrixSize, lud_threads, boxes, props]",[981,983],[1702,1733],"[props, props.refresh, selectedOption]",[845,875],"[props.refresh, executionFlag, props]",[1203,1215],[1822,1871],"[props, props.refresh, selectedFrequency, selectedNumber]",[3338,3455],"[props.refresh, userData, cfd_threads, niter, lambda, nc, nr, width, height, nfr, np, matrixSize, lud_threads, boxes, props]"]