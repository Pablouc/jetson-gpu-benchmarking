[{"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\index.js":"1","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\App.js":"2","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Card.js":"3","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\ExecutionView.js":"4","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Navbar.js":"5","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\StaticCheckbox.js":"6","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\DynamicCheckbox.js":"7","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\Dropdown.js":"8","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\TextInput.js":"9"},{"size":216,"mtime":1695751156443,"results":"10","hashOfConfig":"11"},{"size":565,"mtime":1695963000294,"results":"12","hashOfConfig":"11"},{"size":187,"mtime":1695751156438,"results":"13","hashOfConfig":"11"},{"size":3551,"mtime":1695966217045,"results":"14","hashOfConfig":"11"},{"size":279,"mtime":1695751156438,"results":"15","hashOfConfig":"11"},{"size":1621,"mtime":1695794812252,"results":"16","hashOfConfig":"11"},{"size":2875,"mtime":1695966456929,"results":"17","hashOfConfig":"11"},{"size":969,"mtime":1695794964191,"results":"18","hashOfConfig":"11"},{"size":1569,"mtime":1695795386238,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1f1td20",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\index.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\App.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Card.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\ExecutionView.js",["52"],[],"import React, {useState } from 'react';\r\n\r\nimport './ExecutionView.css';\r\nimport DynamicCheckbox from './DynamicCheckbox';\r\nimport Card from '../UI/Card';\r\nimport StaticCheckbox from './StaticCheckbox';\r\nimport Dropdown from './Dropdown';\r\nimport TextInput from './TextInput';\r\n\r\n\r\nfunction ExecutionView(props) { \r\n    const freqString= 'Please enter a frequency between 800GHz and 1100GHz.';\r\n    const blockString= 'Please enter the amout of blocks per grid. The max is 2147483647.';\r\n    const threadString= 'Please enter the amount of threads per block. The max is 1024.';\r\n    const apps = 'apps';\r\n    const workloads = 'workloads';\r\n    const freq='freq';\r\n    const blocks='blocks';\r\n    const threads='threads';\r\n    let userData = {};\r\n\r\n    const [refreshFlag, setRefreshFlag] = useState(false);\r\n\r\n\r\n    const executeHandler = ( enteredUserData ) => {\r\n        userData = {\r\n            ...userData, // Keep the existing data in userData\r\n            ...enteredUserData, // Add the data from enteredUserData\r\n          };     \r\n    }\r\n\r\n\r\n\r\n\r\n    async function requestExecution(){\r\n        setRefreshFlag(true);\r\n        const response = await fetch(props.executionURL, {\r\n            method: 'POST',\r\n            body: JSON.stringify(userData),\r\n            headers:{\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n           \r\n        });\r\n        const data = await response.json();\r\n\r\n        setRefreshFlag(false);\r\n        console.log(data);\r\n    }\r\n\r\n    return(\r\n        <div className='container'>\r\n            <Card className='left-container'>\r\n                <div>\r\n                    <label className='label'>Select the applications</label>\r\n                    <DynamicCheckbox itemsURL={props.appsURL} field={apps} onExecuteEvent = {executeHandler} ></DynamicCheckbox>\r\n                </div>\r\n                <div>\r\n                    <label className='label'>Select the workloads</label>\r\n                    <DynamicCheckbox itemsURL={props.workloadsURL} field={workloads} onExecuteEvent = {executeHandler}></DynamicCheckbox>\r\n                </div>\r\n                <div>\r\n                    <div>\r\n                        <label className='label'>Sele ct the execution mode</label>\r\n                    </div>\r\n                    <StaticCheckbox onExecuteEvent = {executeHandler}></StaticCheckbox>\r\n                </div>\r\n                <div>\r\n                 <label className='label'>Amount of executions</label>\r\n                 <Dropdown onExecuteEvent = {executeHandler}></Dropdown>\r\n                </div>\r\n                \r\n            </Card>\r\n            <Card className='right-container'>\r\n                \r\n                <div>\r\n                    <label className='label'>Select the GPU frequency</label>\r\n                    <TextInput field={freq} onExecuteEvent = {executeHandler} label={freqString}></TextInput>\r\n                </div>\r\n                <div>\r\n                    <label className='label'>Amount of blocks</label>\r\n                    <TextInput field={blocks} onExecuteEvent = {executeHandler} label={blockString}></TextInput>\r\n                </div>\r\n                <div>\r\n                    <label className='label'>Amount of threads</label>\r\n                    <TextInput field={threads} onExecuteEvent = {executeHandler} label={threadString}></TextInput>\r\n                </div>\r\n                <button className='button' onClick={requestExecution}>Execute</button>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExecutionView;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Navbar.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\StaticCheckbox.js",["53"],[],"import './StaticCheckbox.css';\r\nimport React, {useState, useEffect} from 'react';\r\n\r\nconst StaticCheckbox = (props) =>{\r\n\r\n    const [executionFlag, setExecutionFlag] = useState(false);\r\n\r\n    const handleCheckboxChange = (event) =>{\r\n        const id = event.target.id;\r\n\r\n        // If the clicked checkbox is already checked, uncheck it\r\n        if (id === executionFlag) {\r\n        setExecutionFlag(null);\r\n        } else {\r\n        setExecutionFlag(id); // Otherwise, check the clicked checkbox\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        // This code will run after the state has been updated\r\n        const executionType={ \r\n          execType: executionFlag\r\n        };\r\n        props.onExecuteEvent(executionType);  \r\n        }, [executionFlag]);\r\n\r\n    return(\r\n        <div>\r\n            <div className='checkbox-margin'>\r\n                <label  className='form-control'>\r\n                    <input\r\n                        id='simult'\r\n                        type='checkbox'\r\n                        checked= {executionFlag === 'simult'}\r\n                        onChange={handleCheckboxChange}\r\n                    />Simultaneous\r\n                </label> \r\n                <label className='form-control'>\r\n                    <input\r\n                        id='not-simult'\r\n                        type='checkbox'\r\n                        checked={executionFlag === 'not-simult'}\r\n                        onChange={handleCheckboxChange}\r\n                    />Not Simultaneous\r\n                </label> \r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default StaticCheckbox;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\DynamicCheckbox.js",["54","55","56","57"],[],"import './DynamicCheckbox.css';\r\nimport React, { useState, useEffect  } from 'react';\r\nimport Card from '../UI/Card';\r\n\r\nfunction DynamicCheckbox(props) {\r\n\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [appsOptions, setAppsOptions] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  //Function to fetch data from the api\r\n  //The item will depend on the props, it could be for the workloads or the apps data.\r\n  useEffect(() => {\r\n    setError(null);\r\n    fetch(props.itemsURL)\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n      return response.json();\r\n    })\r\n    .then((data) => {\r\n      setAppsOptions(data.itemNames);\r\n    })\r\n    .catch((error) => {\r\n      setError(error.message);\r\n    });\r\n  }, []);\r\n  \r\n\r\n  //This function retrieves the data to the parent(ExecutionView) throught the function props.onExecuteEvent\r\n  //This function gets triggered every time after the page renders\r\n  useEffect(() => {\r\n    // This code will run after the render\r\n    if(props.field=='apps'){\r\n      const apps={ \r\n        apps:selectedOptions.join(', ')\r\n      };\r\n      props.onExecuteEvent(apps); \r\n    }\r\n    \r\n    else if(props.field=='workloads'){\r\n      const workloads={ \r\n        workloads:selectedOptions.join(', ')\r\n      };\r\n      props.onExecuteEvent(workloads); \r\n    } \r\n    }, [selectedOptions]);\r\n\r\n    \r\n    //Function to update the list of items in the list that is going to be retrieved to the parent component.\r\n    const toggleOption = (option) => {\r\n      if (selectedOptions.includes(option)) {\r\n        setSelectedOptions(selectedOptions.filter((item) => item !== option));\r\n        console.log(selectedOptions.join(', '));\r\n      } else {\r\n        setSelectedOptions([...selectedOptions, option]);\r\n        console.log(selectedOptions.join(', '));\r\n      }\r\n    };\r\n\r\n  return (\r\n    <div>\r\n      <Card className=\"dropdown\">\r\n        <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n          {/* This validation -> appsOptions && is used to make sure that the map is executed util the variable appsOptions has been fetched.\r\n              This is because fetch is an async function.*/}\r\n          {appsOptions && appsOptions.map((option) => (\r\n            <label className=\"dropdown-item\" key={option}>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={selectedOptions.includes(option) && props.refresh_Flag}\r\n                onChange={() => toggleOption(option)}\r\n              />{\" \"}\r\n              {option}\r\n            </label>\r\n          ))}\r\n        </div>\r\n      </Card>\r\n      {error != null && <label className='warning'>Error: {error}</label>}\r\n      <p>Selected options: {selectedOptions.join(', ')}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DynamicCheckbox;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\Dropdown.js",["58"],[],"import React, { useState, useEffect } from 'react';\r\n\r\nimport './Dropdown.css';\r\n\r\nconst Dropdown = (props) => {\r\n\r\n    const [selectedNumber, setSelectedNumber] = useState(null);\r\n\r\n    const handleSelectChange = (e) => {\r\n      setSelectedNumber(e.target.value);\r\n    };\r\n  \r\n    const numbers = Array.from({ length: 15 }, (_, i) => i + 1);\r\n\r\n    \r\n    useEffect(() => {\r\n      // This code will run after the state has been updated\r\n      const execNum={ \r\n        execNum: selectedNumber\r\n      };\r\n      props.onExecuteEvent(execNum);  \r\n      }, [selectedNumber]);\r\n  \r\n    return (\r\n      <div>\r\n        <select className='select' onChange={handleSelectChange} value={selectedNumber}>\r\n          <option value=\"\">Select a number</option>\r\n          {numbers.map((number) => (\r\n            <option key={number} value={number}>\r\n              {number}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Dropdown;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\TextInput.js",["59","60","61","62","63"],[],"\r\nimport React, {useState, useEffect} from 'react';\r\n\r\nimport './TextInput.css';\r\n\r\nconst TextInput = (props) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [selectedNumber, setSelectedNumber] = useState(null);\r\n  \r\n    const handleInputChange = (event) => {\r\n      const value = event.target.value;\r\n      setInputValue(value);\r\n  \r\n      // Validate the input to ensure it's a number between 800 and 1100\r\n      if (/^[8-9]\\d{2}$|^10[0-9]{2}$|^1100$/.test(value)) {\r\n        setSelectedNumber(parseInt(value, 10));\r\n      } else {\r\n        setSelectedNumber(null);\r\n      }\r\n    };\r\n\r\n    //Sending data the the parent\r\n    useEffect(() => {\r\n      // This code will run after the state has been updated\r\n  \r\n      if(props.field=='freq'){\r\n        const freq={ \r\n          freq:inputValue\r\n        };\r\n        props.onExecuteEvent(freq); \r\n      }\r\n\r\n      if(props.field=='threads'){\r\n        const threads={ \r\n          threads:inputValue\r\n        };\r\n        props.onExecuteEvent(threads); \r\n      }\r\n      \r\n      else if(props.field=='blocks'){\r\n        const blocks={ \r\n          blocks:inputValue\r\n        };\r\n        props.onExecuteEvent(blocks); \r\n      } \r\n      }, [inputValue]);\r\n\r\n\r\n  \r\n    return (\r\n      <div>\r\n        <label>{props.label}</label>\r\n        <div>\r\n          <input className='text-box'\r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={handleInputChange}\r\n            placeholder=\"Enter a number\"\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default TextInput;",{"ruleId":"64","severity":1,"message":"65","line":22,"column":12,"nodeType":"66","messageId":"67","endLine":22,"endColumn":23},{"ruleId":"68","severity":1,"message":"69","line":25,"column":12,"nodeType":"70","endLine":25,"endColumn":27,"suggestions":"71"},{"ruleId":"68","severity":1,"message":"72","line":28,"column":6,"nodeType":"70","endLine":28,"endColumn":8,"suggestions":"73"},{"ruleId":"74","severity":1,"message":"75","line":35,"column":19,"nodeType":"76","messageId":"77","endLine":35,"endColumn":21},{"ruleId":"74","severity":1,"message":"75","line":42,"column":24,"nodeType":"76","messageId":"77","endLine":42,"endColumn":26},{"ruleId":"68","severity":1,"message":"69","line":48,"column":8,"nodeType":"70","endLine":48,"endColumn":25,"suggestions":"78"},{"ruleId":"68","severity":1,"message":"69","line":22,"column":10,"nodeType":"70","endLine":22,"endColumn":26,"suggestions":"79"},{"ruleId":"64","severity":1,"message":"80","line":8,"column":12,"nodeType":"66","messageId":"67","endLine":8,"endColumn":26},{"ruleId":"74","severity":1,"message":"75","line":26,"column":21,"nodeType":"76","messageId":"77","endLine":26,"endColumn":23},{"ruleId":"74","severity":1,"message":"75","line":33,"column":21,"nodeType":"76","messageId":"77","endLine":33,"endColumn":23},{"ruleId":"74","severity":1,"message":"75","line":40,"column":26,"nodeType":"76","messageId":"77","endLine":40,"endColumn":28},{"ruleId":"68","severity":1,"message":"69","line":46,"column":10,"nodeType":"70","endLine":46,"endColumn":22,"suggestions":"81"},"no-unused-vars","'refreshFlag' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["82"],"React Hook useEffect has a missing dependency: 'props.itemsURL'. Either include it or remove the dependency array.",["83"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["84"],["85"],"'selectedNumber' is assigned a value but never used.",["86"],{"desc":"87","fix":"88"},{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},{"desc":"95","fix":"96"},"Update the dependencies array to be: [executionFlag, props]",{"range":"97","text":"98"},"Update the dependencies array to be: [props.itemsURL]",{"range":"99","text":"100"},"Update the dependencies array to be: [props, selectedOptions]",{"range":"101","text":"102"},"Update the dependencies array to be: [props, selectedNumber]",{"range":"103","text":"104"},"Update the dependencies array to be: [inputValue, props]",{"range":"105","text":"106"},[746,761],"[executionFlag, props]",[834,836],"[props.itemsURL]",[1418,1435],"[props, selectedOptions]",[553,569],"[props, selectedNumber]",[1203,1215],"[inputValue, props]"]