[{"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\index.js":"1","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\App.js":"2","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Card.js":"3","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\ExecutionView.js":"4","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Navbar.js":"5","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\StaticCheckbox.js":"6","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\DynamicCheckbox.js":"7","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\Dropdown.js":"8","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\TextInput.js":"9","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Apps\\AppComponent.js":"10","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\index.js":"11","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\App.js":"12","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\ExecutionView.js":"13","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Navbar.js":"14","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\DynamicCheckbox.js":"15","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\StaticCheckbox.js":"16","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\TextInput.js":"17","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Card.js":"18","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\Dropdown.js":"19","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Apps\\AppComponent.js":"20","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\PopUp.js":"21","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\MainView\\MainView.js":"22","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Monitoring\\MonitoringView.js":"23","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Monitoring\\MyChart.js":"24","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Monitoring\\ExecutionTime.js":"25"},{"size":216,"mtime":1695751156443,"results":"26","hashOfConfig":"27"},{"size":733,"mtime":1698272315918,"results":"28","hashOfConfig":"27"},{"size":187,"mtime":1695751156438,"results":"29","hashOfConfig":"27"},{"size":4385,"mtime":1698269703543,"results":"30","hashOfConfig":"27"},{"size":264,"mtime":1698200175697,"results":"31","hashOfConfig":"27"},{"size":1621,"mtime":1695794812252,"results":"32","hashOfConfig":"27"},{"size":2873,"mtime":1698217616423,"results":"33","hashOfConfig":"27"},{"size":2840,"mtime":1698272621129,"results":"34","hashOfConfig":"27"},{"size":1569,"mtime":1698217997513,"results":"35","hashOfConfig":"27"},{"size":7101,"mtime":1698217720803,"results":"36","hashOfConfig":"27"},{"size":216,"mtime":1698357842807,"results":"37","hashOfConfig":"38"},{"size":1146,"mtime":1699139665511,"results":"39","hashOfConfig":"38"},{"size":5595,"mtime":1699059829315,"results":"40","hashOfConfig":"38"},{"size":264,"mtime":1698357842807,"results":"41","hashOfConfig":"38"},{"size":2967,"mtime":1698359107714,"results":"42","hashOfConfig":"38"},{"size":1735,"mtime":1698359093396,"results":"43","hashOfConfig":"38"},{"size":1569,"mtime":1698357842805,"results":"44","hashOfConfig":"38"},{"size":187,"mtime":1698357842805,"results":"45","hashOfConfig":"38"},{"size":2969,"mtime":1698359078447,"results":"46","hashOfConfig":"38"},{"size":7645,"mtime":1698901910833,"results":"47","hashOfConfig":"38"},{"size":540,"mtime":1698369854213,"results":"48","hashOfConfig":"38"},{"size":1560,"mtime":1699139690332,"results":"49","hashOfConfig":"38"},{"size":7473,"mtime":1699146187727,"results":"50","hashOfConfig":"38"},{"size":1566,"mtime":1698900160803,"results":"51","hashOfConfig":"38"},{"size":1838,"mtime":1699145122123,"results":"52","hashOfConfig":"38"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1f1td20",{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},"1fadv2y",{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"91"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"91"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"91"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"91"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"91"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"91"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\index.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\App.js",[],[],["141"],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Card.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\ExecutionView.js",["142","143","144","145","146"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Navbar.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\StaticCheckbox.js",["147"],[],"import './StaticCheckbox.css';\r\nimport React, {useState, useEffect} from 'react';\r\n\r\nconst StaticCheckbox = (props) =>{\r\n\r\n    const [executionFlag, setExecutionFlag] = useState(false);\r\n\r\n    const handleCheckboxChange = (event) =>{\r\n        const id = event.target.id;\r\n\r\n        // If the clicked checkbox is already checked, uncheck it\r\n        if (id === executionFlag) {\r\n        setExecutionFlag(null);\r\n        } else {\r\n        setExecutionFlag(id); // Otherwise, check the clicked checkbox\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        // This code will run after the state has been updated\r\n        const executionType={ \r\n          execType: executionFlag\r\n        };\r\n        props.onExecuteEvent(executionType);  \r\n        }, [executionFlag]);\r\n\r\n    return(\r\n        <div>\r\n            <div className='checkbox-margin'>\r\n                <label  className='form-control'>\r\n                    <input\r\n                        id='simult'\r\n                        type='checkbox'\r\n                        checked= {executionFlag === 'simult'}\r\n                        onChange={handleCheckboxChange}\r\n                    />Simultaneous\r\n                </label> \r\n                <label className='form-control'>\r\n                    <input\r\n                        id='not-simult'\r\n                        type='checkbox'\r\n                        checked={executionFlag === 'not-simult'}\r\n                        onChange={handleCheckboxChange}\r\n                    />Not Simultaneous\r\n                </label> \r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default StaticCheckbox;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\DynamicCheckbox.js",["148","149"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\Dropdown.js",["150","151","152","153","154","155"],[],"import React, { useState, useEffect } from 'react';\r\n\r\nimport './Dropdown.css';\r\n\r\nconst Dropdown = (props) => {\r\n\r\n    const [selectedNumber, setSelectedNumber] = useState('');\r\n    const [error, setError] = useState(null);\r\n    const [frequenciesOptions, setFrequenciesOptions] = useState('');\r\n    const [selectedFrequency, setSelectedFrequency] = useState('');\r\n\r\n    const handleSelectChange = (e) => {\r\n      setSelectedNumber(e.target.value);\r\n    };\r\n  \r\n    const numbers = Array.from({ length: 15 }, (_, i) => i + 1);\r\n\r\n\r\n    useEffect(() => {\r\n      if (props.injected === true) {\r\n        setError(null);\r\n        fetch(props.frequenciesURL, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'ngrok-skip-browser-warning': '1',\r\n          },\r\n        })\r\n          .then((response) => {\r\n            if (!response.ok) {\r\n              throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n            return response.json();\r\n          })\r\n          .then((data) => {\r\n            setFrequenciesOptions(data);\r\n          })\r\n          .catch((error) => {\r\n            setError(error.message);\r\n          });\r\n      }\r\n    }, [props.injected, props.frequenciesURL, props.frequenciesOptions]);\r\n\r\n    \r\n    useEffect(() => {\r\n      // This code will run after the state has been updated\r\n      if(props.injected== false){\r\n        const execNum={ \r\n          execNum: selectedNumber\r\n        };\r\n        props.onExecuteEvent(execNum); \r\n      }\r\n      \r\n      if(props.injected== true){\r\n        const freq={ \r\n          freq:selectedFrequency\r\n        };\r\n        props.onExecuteEvent(freq); \r\n      }\r\n\r\n      }, [selectedFrequency,selectedNumber]);\r\n\r\n  \r\n    return (\r\n      <div>\r\n        {(props.injected == false) && (\r\n          <div>\r\n          <select className='select' onChange={handleSelectChange} value={selectedNumber}>\r\n            <option value=\"\">Select a number</option>\r\n            {numbers.map((number) => (\r\n              <option key={number} value={number}>\r\n                {number}\r\n              </option>\r\n            ))}\r\n          </select>\r\n\r\n          </div>\r\n        )}\r\n\r\n        {(props.injected == true) && frequenciesOptions && (          \r\n            <div>\r\n            <select\r\n              className=\"select\"\r\n              onChange={(e) => setSelectedFrequency(e.target.value)}\r\n              value={selectedFrequency}\r\n            >\r\n              <option value=\"\">Select a frequency</option>\r\n              {frequenciesOptions.map((frequency) => (\r\n                <option key={frequency} value={frequency}>\r\n                  {frequency}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        )}\r\n        \r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Dropdown;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\TextInput.js",["156","157","158","159","160"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Apps\\AppComponent.js",["161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176"],[],"import React, { useState, useEffect  } from 'react';\r\nimport DynamicCheckbox from '../Request-Execution/DynamicCheckbox';\r\nimport './AppComponents.css';\r\n\r\nconst AppComponent = (props) => {\r\n  \r\n    const workloads = 'workloads';\r\n    let userData={}\r\n\r\n    const [isChecked, setIsChecked] = useState(false);\r\n\r\n    //Constants to save inputs values\r\n    const [cfd_threads, set_cfd_Threads] = useState('');\r\n    const [niter, setNiter] = useState('');\r\n    const [lambda, setLambda] = useState('');\r\n    const [nc, setNc] = useState('');\r\n    const [nr, setNr] = useState('');\r\n    const [width, setWidth] = useState('');\r\n    const [height, setHeight] = useState('');\r\n    const [nfr, setNfr] = useState('');\r\n    const [np, setNp] = useState('');\r\n    const [matrixSize, setMatrixSize] = useState('');\r\n    const [lud_threads, set_lud_threads] = useState('');\r\n    const [boxes, setBoxes] = useState('');\r\n\r\n    const executeHandler = ( enteredUserData ) => {\r\n        userData = {\r\n            ...userData, // Keep the existing data in userData\r\n            ...enteredUserData, // Add the data from enteredUserData\r\n        };\r\n        if (props.appName == 'CFD'){\r\n            const cfdApp={\r\n                cfd_workloads : userData.cfd_workload\r\n            }\r\n            props.onExecuteEvent(cfdApp);\r\n        }\r\n        else if (props.appName == 'BFS'){\r\n            const bfs = {\r\n                bfs_name:'BFS',\r\n                bfs_workloads : userData.bfs_workload\r\n            }\r\n            props.onExecuteEvent(bfs);\r\n        }\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        props.updateData(event.target.value);\r\n    }\r\n\r\n    const handleCheckboxChange = () => {\r\n        setIsChecked(prevState => !prevState); // Invierte el valor de isChecked\r\n    };\r\n\r\n    //Sending data the the parent\r\n    useEffect(() => {\r\n    // This code will run after the state has been updated\r\n\r\n\r\n    if(props.appName=='CFD'){\r\n        const cfd={ \r\n        cfd_name: 'CFD',\r\n        cfd_threads: cfd_threads\r\n        };\r\n        props.onExecuteEvent(cfd); \r\n    }\r\n\r\n    else if(props.appName=='LavaMD'){\r\n        const lavaMD={ \r\n        lava_name: 'LavaMD',\r\n        lava_workloads:' -boxes1d '+ boxes\r\n        };\r\n        props.onExecuteEvent(lavaMD); \r\n    }\r\n\r\n    else if(props.appName=='Particle Filter'){\r\n        const particle={ \r\n        filter_name: 'Particle Filter',\r\n        filter_workloads: ' -x ' + width + ' -y ' + height + ' -z ' + nfr + ' -np ' + np\r\n        };\r\n        props.onExecuteEvent(particle); \r\n    }\r\n\r\n    else if(props.appName=='Srad'){\r\n        const srad={ \r\n        srad_name: 'Srad',\r\n        srad_workloads: String(niter) + ' ' + String(lambda) + ' ' +  String(nr)+ ' ' + String(nc)\r\n        };\r\n        props.onExecuteEvent(srad); \r\n    }\r\n\r\n    else if(props.appName=='Lud'){\r\n        const lud={ \r\n        lud_name: 'Lud',\r\n        lud_workloads: ' -s ' + matrixSize ,\r\n        lud_threads: lud_threads\r\n        };\r\n        props.onExecuteEvent(lud); \r\n    } \r\n    }, [userData, cfd_threads, niter, lambda, nc, nr, width, height, nfr, np, matrixSize, lud_threads, boxes]);\r\n    \r\n\r\n\r\n  return (\r\n    <div className='app-style'>\r\n        <label>\r\n      <input type=\"checkbox\" onChange={handleCheckboxChange}/>{props.appName}\r\n      </label>\r\n      <div className='text-style'>\r\n        \r\n        { isChecked && (props.appName == 'BFS') && (\r\n            <>\r\n            <label>Workloads files:</label>\r\n            <DynamicCheckbox itemsURL={props.itemsURL} appName={'BFS'} onExecuteEvent = {executeHandler}/>\r\n            </>\r\n        )}\r\n\r\n        { isChecked && (props.appName == 'CFD') && (\r\n        <>\r\n            <label>Workloads files:</label>\r\n            <DynamicCheckbox itemsURL={props.itemsURL} appName={'CFD'} onExecuteEvent = {executeHandler}/>\r\n            <div >\r\n                <label>Threads per block</label>\r\n                <input type='number' className='input-style' value={cfd_threads} onChange={e => set_cfd_Threads(e.target.value)}></input>\r\n            </div>\r\n        </>\r\n        )}\r\n\r\n        {isChecked && (props.appName == 'LavaMD') && (\r\n        <>\r\n            <div>\r\n                <label>Number of boxes</label>\r\n                <input type='number' className='input-style' value={boxes} onChange={e => setBoxes(e.target.value)}></input>\r\n            </div>\r\n        </>\r\n        )}\r\n\r\n        {isChecked && (props.appName == 'Particle Filter') && (\r\n            <>\r\n                <div>\r\n                    <label>Width</label>\r\n                    <input type='number' className='input-style' value={width} onChange={e => setWidth(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Height</label>\r\n                    <input type='number' className='input-style' value={height} onChange={e => setHeight(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of frames</label>\r\n                    <input type='number' className='input-style' value={nfr} onChange={e => setNfr(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of particles</label>\r\n                    <input type='number' className='input-style' value={np} onChange={e => setNp(e.target.value)}></input>\r\n                </div>\r\n            </>\r\n        )}\r\n\r\n        {isChecked && (props.appName == 'Srad') && (\r\n            <>\r\n                <div>\r\n                    <label>Algorithm iterations in the image</label>\r\n                    <input type='number' className='input-style' value={niter} onChange={e => setNiter(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Amount of diffusion</label>\r\n                    <input type='number' step=\"0.01\" className='input-style' value={lambda} onChange={e => setLambda(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of rows</label>\r\n                    <input type='number' className='input-style' value={nr} onChange={e => setNr(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of columns</label>\r\n                    <input type='number' className='input-style' value={nc} onChange={e => setNc(e.target.value)}></input>\r\n                </div>\r\n            </>\r\n        )}\r\n\r\n\r\n        {isChecked && (props.appName == 'Lud') && (\r\n            <>\r\n                <div>\r\n                    <label>Matrix size</label>\r\n                    <input type='number' className='input-style' value={matrixSize} onChange={e => setMatrixSize(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Threads per block</label>\r\n                    <input type='number' className='input-style' value={lud_threads} onChange={e => set_lud_threads(e.target.value)}></input>\r\n                </div>\r\n            </>\r\n        )}\r\n      </div>\r\n      \r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppComponent;\r\n",["177"],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\index.js",[],[],["178"],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\App.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\ExecutionView.js",["179"],[],"import React, {useState, useEffect } from 'react';\r\n\r\nimport './ExecutionView.css';\r\nimport Card from '../UI/Card';\r\nimport StaticCheckbox from './StaticCheckbox';\r\nimport Dropdown from './Dropdown';\r\nimport AppComponent from '../Apps/AppComponent';\r\nimport Popup from '../UI/PopUp';\r\n\r\nfunction ExecutionView(props) { \r\n    const workloads = 'workloads';\r\n    let userData = {};\r\n\r\n    const [refreshFlag, setRefreshFlag] = useState(false);\r\n    const [isPopupOpen, setPopupOpen] = useState(false);\r\n    const [MonitoringFlag, setMonitoringFlag] = useState(false);\r\n\r\n    const executeHandler = ( enteredUserData ) => {\r\n        userData = {\r\n            ...userData, // Keep the existing data in userData\r\n            ...enteredUserData, // Add the data from enteredUserData\r\n          };\r\n         \r\n    }\r\n\r\n\r\n\r\n    async function requestExecution() {\r\n        setRefreshFlag(true);\r\n        setRefreshFlag(false);\r\n        setMonitoringFlag(true);\r\n        props.setExecState('InProgress');\r\n      \r\n        try {\r\n          const response = await fetch(props.executionURL, {\r\n            method: 'POST',\r\n            body: JSON.stringify(userData),\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          });\r\n      \r\n          if (!response.ok) {\r\n            // Handle HTTP errors\r\n            props.setExecState('Failed');\r\n            throw new Error(`HTTP error! Status: ${response.status}`);\r\n          }\r\n      \r\n          const data = await response.json();\r\n          props.setExecState('Succed');\r\n      \r\n          console.log(data);\r\n      \r\n        } catch (error) {\r\n          console.error('Error:', error.message);\r\n      \r\n        }\r\n      }\r\n      \r\n\r\n\r\n    const closePopup = () => {\r\n        setPopupOpen(false);\r\n        setMonitoringFlag(true);\r\n      };\r\n\r\n      useEffect(() => {\r\n        props.setView(MonitoringFlag);\r\n    }, [MonitoringFlag]);\r\n\r\n\r\n\r\n    return(\r\n        <div >\r\n            <div className='popup'>\r\n                <Popup isOpen={isPopupOpen} onClose={closePopup}/>\r\n            </div>\r\n            <div className='execution-container'>\r\n                <Card className='left-container'>\r\n                    <label className='label'>Select the applications</label>\r\n                    {/* <div>\r\n                        \r\n                        <DynamicCheckbox itemsURL={props.appsURL} field={apps} onExecuteEvent = {executeHandler} ></DynamicCheckbox>\r\n                    </div>\r\n                    <div>\r\n                        <label className='label'>Select the workloads</label>\r\n                        <DynamicCheckbox itemsURL={props.workloadsURL} field={workloads} onExecuteEvent = {executeHandler}></DynamicCheckbox>\r\n                    </div> */}\r\n                    <div>\r\n                        <AppComponent refresh={refreshFlag} itemsURL={props.bfs_workloadsURL} field={workloads} onExecuteEvent = {executeHandler} appName  ={'BFS'}/>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <AppComponent refresh={refreshFlag} itemsURL={props.cfd_workloadsURL} field={workloads} onExecuteEvent = {executeHandler} appName  ={'CFD'}/>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <AppComponent refresh={refreshFlag} itemsURL={props.workloadsURL} field={workloads} onExecuteEvent = {executeHandler} appName  ={'Srad'}/>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <AppComponent refresh={refreshFlag} itemsURL={props.workloadsURL} field={workloads} onExecuteEvent = {executeHandler} appName  ={'Particle Filter'}/>\r\n                    </div>\r\n\r\n                \r\n                    \r\n                </Card>\r\n                <Card className='right-container'>\r\n\r\n                    <div className='margins'>\r\n                        <AppComponent refresh={refreshFlag} itemsURL={props.workloadsURL} field={workloads} onExecuteEvent = {executeHandler} appName  ={'LavaMD'}/>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <AppComponent refresh={refreshFlag} itemsURL={props.workloadsURL} field={workloads} onExecuteEvent = {executeHandler} appName  ={'Lud'}/>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <div>\r\n                            <label className='label'>Select the execution mode</label>\r\n                        </div>\r\n                        <StaticCheckbox refresh={refreshFlag} onExecuteEvent = {executeHandler}></StaticCheckbox>\r\n                    </div>\r\n\r\n                    <div>\r\n                    <label className='label'>Amount of executions</label>\r\n                    <Dropdown refresh={refreshFlag} injected={false} onExecuteEvent = {executeHandler}></Dropdown>\r\n                    </div>\r\n\r\n                    <div>\r\n                    <label className='label'>Amount of executions</label>\r\n                    <Dropdown refresh={refreshFlag} injected={true} frequenciesURL={props.frequenciesURL} onExecuteEvent = {executeHandler}></Dropdown>\r\n                    </div>\r\n                    \r\n                    {/*<div>\r\n                        <label className='label'>Select the GPU frequency</label>\r\n                        <TextInput field={freq} onExecuteEvent = {executeHandler} label={freqString}></TextInput>\r\n                    </div>\r\n                */}\r\n                    <button className='button' onClick={requestExecution}>Execute</button>\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExecutionView;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Navbar.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\DynamicCheckbox.js",["180","181","182"],[],"import './DynamicCheckbox.css';\r\nimport React, { useState, useEffect  } from 'react';\r\nimport Card from '../UI/Card';\r\n\r\nfunction DynamicCheckbox(props) {\r\n\r\n  const [selectedOption, setSelectedOption] = useState([]);\r\n  const [appsOptions, setAppsOptions] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  //Function to fetch data from the api\r\n  //The item will depend on the props, it could be for the workloads or the apps data.\r\n  useEffect(() => {\r\n    setError(null);\r\n    fetch(props.itemsURL ,{\r\n      method: 'GET',\r\n      headers: {\r\n          'Content-Type': 'application/json',\r\n          'ngrok-skip-browser-warning': '1'\r\n      }\r\n  })\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n      return response.json();\r\n    })\r\n    .then((data) => {\r\n      setAppsOptions(data.itemNames);\r\n    })\r\n    .catch((error) => {\r\n      setError(error.message);\r\n    });\r\n  }, []);\r\n  \r\n\r\n  //This function retrieves the data to the parent(ExecutionView) throught the function props.onExecuteEvent\r\n  //This function gets triggered every time after the page renders\r\n  useEffect(() => {\r\n    // This code will run after the render\r\n\r\n    if(props.refresh == true){\r\n      setSelectedOption(null);\r\n    }\r\n    \r\n    if (props.appName === 'BFS' && selectedOption !== null) {\r\n      const bfs_workload = {\r\n        bfs_workload: selectedOption\r\n      };\r\n      props.onExecuteEvent(bfs_workload);\r\n    } else if (props.appName === 'CFD' && selectedOption !== null) {\r\n      const cfd_workload = {\r\n        cfd_workload: selectedOption\r\n      };\r\n      props.onExecuteEvent(cfd_workload);\r\n    }\r\n  }, [props.refresh ,selectedOption]);\r\n\r\n    \r\n  // Function to update the selected option\r\n  const toggleOption = (option) => {\r\n    if (selectedOption === option) {\r\n      // Deselect the option if it's already selected\r\n      setSelectedOption(null);\r\n    } else {\r\n      // Select the new option\r\n      setSelectedOption(option);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card className=\"dropdown\">\r\n        <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n          {/* This validation -> appsOptions && is used to make sure that the map is executed util the variable appsOptions has been fetched.\r\n              This is because fetch is an async function.*/}\r\n          {appsOptions && appsOptions.map((option) => (\r\n            <label className=\"dropdown-item\" key={option}>\r\n              <input\r\n                type=\"checkbox\"\r\n                className='options-style'\r\n                checked={selectedOption === option}\r\n                onChange={() => toggleOption(option)}\r\n              />{\" \"}\r\n              {option}\r\n            </label>\r\n          ))}\r\n        </div>\r\n      </Card>\r\n      {error != null && <label className='warning'>Error: {error}</label>}\r\n      \r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DynamicCheckbox;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\StaticCheckbox.js",["183"],[],"import './StaticCheckbox.css';\r\nimport React, {useState, useEffect} from 'react';\r\n\r\nconst StaticCheckbox = (props) =>{\r\n\r\n    const [executionFlag, setExecutionFlag] = useState(false);\r\n\r\n    const handleCheckboxChange = (event) =>{\r\n        const id = event.target.id;\r\n\r\n        // If the clicked checkbox is already checked, uncheck it\r\n        if (id === executionFlag) {\r\n        setExecutionFlag(null);\r\n        } else {\r\n        setExecutionFlag(id); // Otherwise, check the clicked checkbox\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        // This code will run after the state has been updated\r\n\r\n        if( props.refresh === true){\r\n            setExecutionFlag(false);\r\n        }\r\n        \r\n        const executionType={ \r\n          execType: executionFlag\r\n        };\r\n        props.onExecuteEvent(executionType);  \r\n        }, [props.refresh ,executionFlag]);\r\n\r\n    return(\r\n        <div>\r\n            <div className='checkbox-margin'>\r\n                <label  className='form-control'>\r\n                    <input\r\n                        id='simult'\r\n                        type='checkbox'\r\n                        checked= {executionFlag === 'simult'}\r\n                        onChange={handleCheckboxChange}\r\n                    />Simultaneous\r\n                </label> \r\n                <label className='form-control'>\r\n                    <input\r\n                        id='not-simult'\r\n                        type='checkbox'\r\n                        checked={executionFlag === 'not-simult'}\r\n                        onChange={handleCheckboxChange}\r\n                    />Not Simultaneous\r\n                </label> \r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default StaticCheckbox;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\TextInput.js",["184","185","186","187","188"],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\Card.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Request-Execution\\Dropdown.js",["189","190","191","192","193","194"],[],"import React, { useState, useEffect } from 'react';\r\n\r\nimport './Dropdown.css';\r\n\r\nconst Dropdown = (props) => {\r\n\r\n    const [selectedNumber, setSelectedNumber] = useState('');\r\n    const [error, setError] = useState(null);\r\n    const [frequenciesOptions, setFrequenciesOptions] = useState('');\r\n    const [selectedFrequency, setSelectedFrequency] = useState('');\r\n\r\n    const handleSelectChange = (e) => {\r\n      setSelectedNumber(e.target.value);\r\n    };\r\n  \r\n    const numbers = Array.from({ length: 15 }, (_, i) => i + 1);\r\n\r\n\r\n    useEffect(() => {\r\n      if (props.injected === true) {\r\n        setError(null);\r\n        fetch(props.frequenciesURL, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'ngrok-skip-browser-warning': '1',\r\n          },\r\n        })\r\n          .then((response) => {\r\n            if (!response.ok) {\r\n              throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n            return response.json();\r\n          })\r\n          .then((data) => {\r\n            setFrequenciesOptions(data);\r\n          })\r\n          .catch((error) => {\r\n            setError(error.message);\r\n          });\r\n      }\r\n    }, [props.injected, props.frequenciesURL, props.frequenciesOptions]);\r\n\r\n    \r\n    useEffect(() => {\r\n      // This code will run after the state has been updated\r\n      if( props.refresh === true){\r\n        setSelectedNumber('');\r\n        setSelectedFrequency('');\r\n      }\r\n\r\n      if(props.injected== false){\r\n        const execNum={ \r\n          execNum: selectedNumber\r\n        };\r\n        props.onExecuteEvent(execNum); \r\n      }\r\n      \r\n      if(props.injected== true){\r\n        const freq={ \r\n          freq:selectedFrequency\r\n        };\r\n        props.onExecuteEvent(freq); \r\n      }\r\n\r\n      }, [props.refresh ,selectedFrequency,selectedNumber]);\r\n\r\n  \r\n    return (\r\n      <div>\r\n        {(props.injected == false) && (\r\n          <div>\r\n          <select className='select' onChange={handleSelectChange} value={selectedNumber}>\r\n            <option value=\"\">Select a number</option>\r\n            {numbers.map((number) => (\r\n              <option key={number} value={number}>\r\n                {number}\r\n              </option>\r\n            ))}\r\n          </select>\r\n\r\n          </div>\r\n        )}\r\n\r\n        {(props.injected == true) && frequenciesOptions && (          \r\n            <div>\r\n            <select\r\n              className=\"select\"\r\n              onChange={(e) => setSelectedFrequency(e.target.value)}\r\n              value={selectedFrequency}\r\n            >\r\n              <option value=\"\">Select a frequency</option>\r\n              {frequenciesOptions.map((frequency) => (\r\n                <option key={frequency} value={frequency}>\r\n                  {frequency}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        )}\r\n        \r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Dropdown;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Apps\\AppComponent.js",["195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222"],[],"import React, { useState, useEffect  } from 'react';\r\nimport DynamicCheckbox from '../Request-Execution/DynamicCheckbox';\r\nimport './AppComponents.css';\r\n\r\nconst AppComponent = (props) => {\r\n  \r\n    let userData={}\r\n\r\n    const [isChecked, setIsChecked] = useState(false);\r\n\r\n    //Constants to save inputs values\r\n    const [cfd_threads, set_cfd_Threads] = useState('');\r\n    const [niter, setNiter] = useState('');\r\n    const [lambda, setLambda] = useState('');\r\n    const [nc, setNc] = useState('');\r\n    const [nr, setNr] = useState('');\r\n    const [width, setWidth] = useState('');\r\n    const [height, setHeight] = useState('');\r\n    const [nfr, setNfr] = useState('');\r\n    const [np, setNp] = useState('');\r\n    const [matrixSize, setMatrixSize] = useState('');\r\n    const [lud_threads, set_lud_threads] = useState('');\r\n    const [boxes, setBoxes] = useState('');\r\n\r\n    const executeHandler = ( enteredUserData ) => {\r\n        userData = {\r\n            ...userData, // Keep the existing data in userData\r\n            ...enteredUserData, // Add the data from enteredUserData\r\n        };\r\n        if (props.appName == 'CFD'){\r\n            const cfdApp={\r\n                cfd_workloads : userData.cfd_workload\r\n            }\r\n            props.onExecuteEvent(cfdApp);\r\n        }\r\n        else if (props.appName == 'BFS'){\r\n            const bfs = {\r\n                bfs_name:'BFS',\r\n                bfs_workloads : userData.bfs_workload\r\n            }\r\n            props.onExecuteEvent(bfs);\r\n        }\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        props.updateData(event.target.value);\r\n    }\r\n\r\n    const handleCheckboxChange = () => {\r\n        setIsChecked(prevState => !prevState); // Invierte el valor de isChecked\r\n    };\r\n\r\n    //Sending data the the parent\r\n    useEffect(() => {\r\n    // This code will run after the state has been updated\r\n    if( props.refresh == true){\r\n        setIsChecked(false);\r\n        set_cfd_Threads('');\r\n        setNiter('');\r\n        setLambda('');\r\n        setNc('');\r\n        setNr('');\r\n        setWidth('');\r\n        setHeight('');\r\n        setNfr('');\r\n        setNp('');\r\n        setMatrixSize('');\r\n        set_lud_threads('');\r\n        setBoxes('');\r\n    }\r\n\r\n    if(props.appName=='CFD'){\r\n        const cfd={ \r\n        cfd_name: 'CFD',\r\n        cfd_threads: cfd_threads\r\n        };\r\n        if(cfd_threads!='') props.onExecuteEvent(cfd); \r\n    }\r\n\r\n    else if(props.appName=='LavaMD'){\r\n        const lavaMD={ \r\n        lava_name: 'LavaMD',\r\n        lava_workloads:' -boxes1d '+ boxes\r\n        };\r\n\r\n        if(boxes!='') props.onExecuteEvent(lavaMD); \r\n    }\r\n\r\n    else if(props.appName=='Particle Filter'){\r\n        const particle={ \r\n        filter_name: 'Particle Filter',\r\n        filter_workloads: ' -x ' + width + ' -y ' + height + ' -z ' + nfr + ' -np ' + np\r\n        };\r\n        if((width!='') && (height!='') && (nfr!='') && (np!='')) props.onExecuteEvent(particle); \r\n    }\r\n\r\n    else if(props.appName=='Srad'){\r\n        const srad={ \r\n        srad_name: 'Srad',\r\n        srad_workloads: String(niter) + ' ' + String(lambda) + ' ' +  String(nr)+ ' ' + String(nc)\r\n        };\r\n        if((niter!='') && (lambda!='') && (nr!='') && (nc!='')) props.onExecuteEvent(srad); \r\n    }\r\n\r\n    else if(props.appName=='Lud'){\r\n        const lud={ \r\n        lud_name: 'Lud',\r\n        lud_workloads: ' -s ' + matrixSize ,\r\n        lud_threads: lud_threads\r\n        };\r\n        if((matrixSize!='') && (lud_threads!='')) props.onExecuteEvent(lud); \r\n    } \r\n    }, [props.refresh ,userData, cfd_threads, niter, lambda, nc, nr, width, height, nfr, np, matrixSize, lud_threads, boxes]);\r\n    \r\n\r\n\r\n  return (\r\n    <div className='app-style'>\r\n        <label>\r\n      <input type=\"checkbox\" checked={isChecked} onChange={handleCheckboxChange}/>{props.appName}\r\n      </label>\r\n      <div className='text-style'>\r\n        \r\n        { isChecked && (props.appName == 'BFS') && (\r\n            <>\r\n            <label>Workloads files:</label>\r\n            <DynamicCheckbox itemsURL={props.itemsURL} appName={'BFS'} onExecuteEvent = {executeHandler}/>\r\n            </>\r\n        )}\r\n\r\n        { isChecked && (props.appName == 'CFD') && (\r\n        <>\r\n            <label>Workloads files:</label>\r\n            <DynamicCheckbox itemsURL={props.itemsURL} appName={'CFD'} onExecuteEvent = {executeHandler}/>\r\n            <div >\r\n                <label>Threads per block</label>\r\n                <input type='number' className='input-style' value={cfd_threads} onChange={e => set_cfd_Threads(e.target.value)}></input>\r\n            </div>\r\n        </>\r\n        )}\r\n\r\n        {isChecked && (props.appName == 'LavaMD') && (\r\n        <>\r\n            <div>\r\n                <label>Number of boxes</label>\r\n                <input type='number' className='input-style' value={boxes} onChange={e => setBoxes(e.target.value)}></input>\r\n            </div>\r\n        </>\r\n        )}\r\n\r\n        {isChecked && (props.appName == 'Particle Filter') && (\r\n            <>\r\n                <div>\r\n                    <label>Width</label>\r\n                    <input type='number' className='input-style' value={width} onChange={e => setWidth(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Height</label>\r\n                    <input type='number' className='input-style' value={height} onChange={e => setHeight(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of frames</label>\r\n                    <input type='number' className='input-style' value={nfr} onChange={e => setNfr(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of particles</label>\r\n                    <input type='number' className='input-style' value={np} onChange={e => setNp(e.target.value)}></input>\r\n                </div>\r\n            </>\r\n        )}\r\n\r\n        {isChecked && (props.appName == 'Srad') && (\r\n            <>\r\n                <div>\r\n                    <label>Algorithm iterations in the image</label>\r\n                    <input type='number' className='input-style' value={niter} onChange={e => setNiter(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Amount of diffusion</label>\r\n                    <input type='number' step=\"0.01\" className='input-style' value={lambda} onChange={e => setLambda(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of rows</label>\r\n                    <input type='number' className='input-style' value={nr} onChange={e => setNr(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Number of columns</label>\r\n                    <input type='number' className='input-style' value={nc} onChange={e => setNc(e.target.value)}></input>\r\n                </div>\r\n            </>\r\n        )}\r\n\r\n\r\n        {isChecked && (props.appName == 'Lud') && (\r\n            <>\r\n                <div>\r\n                    <label>Matrix size</label>\r\n                    <input type='number' className='input-style' value={matrixSize} onChange={e => setMatrixSize(e.target.value)}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Threads per block</label>\r\n                    <input type='number' className='input-style' value={lud_threads} onChange={e => set_lud_threads(e.target.value)}></input>\r\n                </div>\r\n            </>\r\n        )}\r\n      </div>\r\n      \r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppComponent;\r\n","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\UI\\PopUp.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\MainView\\MainView.js",["223","224"],[],"import Navbar from \"../UI/Navbar\";\r\nimport ExecutionView from \"../Request-Execution/ExecutionView\";\r\nimport MonitoringView from \"../Monitoring/MonitoringView\";\r\n\r\n\r\nimport React, {useState } from 'react';\r\n\r\n\r\nfunction MainView(props) {\r\n\r\n    const [showMonitoring, setShowMonitoring] = useState(false);\r\n\r\n    //Options: Succed, Failed, InProgress, Paused\r\n    const [executingState, setExecutingState] = useState('Paused');\r\n\r\n    const handleView = (viewFlag) =>{\r\n        setShowMonitoring(viewFlag);\r\n    }\r\n\r\n    const handleExecState = (exec_state) =>{\r\n        setExecutingState(exec_state);\r\n    }\r\n\r\n\r\n    return (\r\n      <div>\r\n        <Navbar/>\r\n        {\r\n            showMonitoring == false  && (\r\n                <>\r\n                <ExecutionView cfd_workloadsURL={props.cfd_workloadsURL} bfs_workloadsURL={props.bfs_workloadsURL} \r\n                      executionURL={props.executionURL} frequenciesURL={props.frequenciesURL} setView={handleView} \r\n                      setExecState={handleExecState}/>\r\n                </>\r\n            ) \r\n        }\r\n        {\r\n            showMonitoring == true && (\r\n                <> \r\n                <MonitoringView resultsFileURL={props.resultsFileURL} setView={handleView} currentAppsURL={props.currentAppsURL} \r\n                getExecState={executingState} gpu_dataURL={props.gpu_dataURL} gpu_IterDataURL= {props.gpu_IterDataURL}\r\n                execTimeURL={props.execTimeURL}/>\r\n                </>\r\n            )\r\n        }\r\n        \r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default MainView;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Monitoring\\MonitoringView.js",["225","226","227"],[],"import { useState, useEffect } from \"react\";\r\nimport './MonitoringView.css';\r\nimport MyChart from \"./MyChart\";\r\nimport ExecutionTime from \"./ExecutionTime\";\r\n\r\nfunction MonitoringView (props) {\r\n  \r\n\r\n    const [error, setError] = useState('');\r\n    const [currentApps, setCurrentApps] = useState([]);\r\n    const [gpuTemp, setGpuTemp] =  useState('');\r\n    const [gpuFreq, setGpuFreq] =  useState('');\r\n    const [gpuPower, setPower] =  useState('');\r\n    const [gpu_PowerArray, setGpuPowerArray] = useState([]);\r\n    const [gpu_TempArray, setGpuTempArray] = useState([]);\r\n\r\n    const downloadResults = () => {\r\n        console.log(props.resultsFileURL);\r\n        fetch(props.resultsFileURL, {\r\n            method: 'GET',\r\n            headers: {\r\n                'ngrok-skip-browser-warning': '1'\r\n            }\r\n        })\r\n        .then((response) => {\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n            return response.blob();\r\n        })\r\n        .then((blob) => {\r\n            const url = window.URL.createObjectURL(blob);\r\n            const a = document.createElement('a');\r\n            a.href = url;\r\n            a.download = 'execution_results.csv'; // Or whatever you want the filename to be\r\n            a.click();\r\n            window.URL.revokeObjectURL(url);\r\n        })\r\n        .catch((error) => {\r\n            setError(error.message);\r\n        });\r\n    }\r\n\r\n    const fetch_AppsInUse = () => {\r\n        setError(null);\r\n        fetch(props.currentAppsURL, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'ngrok-skip-browser-warning': '1'\r\n          }\r\n        })\r\n          .then((response) => {\r\n            if (!response.ok) {\r\n              throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n            return response.json();\r\n          })\r\n          .then((data) => {\r\n            //console.log(data);\r\n            setCurrentApps(data);\r\n          })\r\n          .catch((error) => {\r\n            setError(error.message);\r\n          });\r\n      };\r\n\r\n      const fetch_GPUData = () => {\r\n        setError(null);\r\n        fetch(props.gpu_dataURL, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'ngrok-skip-browser-warning': '1'\r\n          }\r\n        })\r\n          .then((response) => {\r\n            if (!response.ok) {\r\n              throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n            return response.json();\r\n          })\r\n          .then((data) => {\r\n            //console.log(data);\r\n            setGpuTemp(data.temperature);\r\n            setGpuFreq(data.frequency);\r\n            setPower(data.power);\r\n            console.log(data.exec_time);\r\n          })\r\n          .catch((error) => {\r\n            setError(error.message);\r\n          });\r\n      };\r\n\r\n\r\n      const fetch_GPUIterationsData = () => {\r\n        setError(null);\r\n        fetch(props.gpu_IterDataURL, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'ngrok-skip-browser-warning': '1'\r\n          }\r\n        })\r\n          .then((response) => {\r\n            if (!response.ok) {\r\n              throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n            return response.json();\r\n          })\r\n          .then((data) => {\r\n            //console.log(data);\r\n            setGpuTempArray(data.temperature);\r\n            setGpuPowerArray(data.power);\r\n          })\r\n          .catch((error) => {\r\n            setError(error.message);\r\n          });\r\n      };\r\n\r\n    useEffect(() => {\r\n        if (props.getExecState === 'InProgress') {\r\n          fetch_AppsInUse();\r\n          fetch_GPUData();\r\n          fetch_GPUIterationsData();\r\n      \r\n          // Set up a polling interval (every 5 seconds in this example) for both\r\n          const pollingIntervalId = setInterval(() => {\r\n            fetch_AppsInUse();\r\n            fetch_GPUData();\r\n            fetch_GPUIterationsData();\r\n          }, 1000);\r\n      \r\n            return () => clearInterval(pollingIntervalId);\r\n        }\r\n    }, [props.currentAppsURL, currentApps, props.getExecState, props.gpuData]);\r\n\r\n\r\n    const changeView=()=>{\r\n      setGpuTemp('');\r\n      setGpuFreq('');  \r\n      setPower('');  \r\n      setGpuPowerArray ([]);\r\n      setGpuTempArray([]);\r\n      props.setView(false);\r\n    }\r\n\r\n\r\n    return(\r\n        <div>\r\n        \r\n            <div>\r\n                <button className=\"monitoring-button\" onClick={downloadResults}>Download results</button>\r\n                <button className=\"monitoring-button\" onClick={changeView}>Request Execution</button>\r\n            </div>\r\n            <div className=\"container\">\r\n\r\n                <div className=\"cell\"> \r\n                  <div className=\"cell-Title\">\r\n                    <h2 >Apps being executed </h2>\r\n                  </div>\r\n                  <div className=\"cell-body\">\r\n                      {currentApps === null ? (\r\n                          <p>Loading...</p>\r\n                      ) : (\r\n                          currentApps.map((item, index) => (\r\n                              <div key={index} className=\"boldText\">{item}</div>\r\n                          ))\r\n                      )}\r\n\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"cell \">\r\n                  <div className=\"cell-Title\">\r\n                    <h2 className=\"cell-Title\">GPU Temperature (C°)</h2>\r\n                  </div>\r\n                  <div className=\"cell-body\">\r\n                  { gpuTemp !== null  && (\r\n                      <label className=\"singleData-metric\">{gpuTemp}</label>\r\n                  )}\r\n                  </div>\r\n                    \r\n                    \r\n                </div>\r\n                \r\n                <div className=\"cell\">\r\n                  <div className=\"cell-Title\">\r\n                    <h2>GPU Frequency (MHz)</h2>\r\n                  </div>\r\n                  <div  className=\"cell-body\">\r\n                  { gpuFreq !== null  && (\r\n                      <label className=\"singleData-metric\">{gpuFreq}</label>\r\n                  )}\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"cell\">\r\n                  <div className=\"cell-Title\">\r\n                    <h2 >Power Consumption (W)</h2>\r\n                  </div>\r\n                  <div className=\"cell-body\">\r\n                    { gpuPower !== null  && (\r\n                        <label className=\"singleData-metric\">{gpuPower}</label>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"cell\">\r\n                  <div className=\"cell-Title\">\r\n                    <h2 >Threads In Use</h2>\r\n                  </div>\r\n                  <div className=\"cell-body\"></div>\r\n                </div>\r\n\r\n                <div className=\"cell\">\r\n                  <div className=\"cell-Title\">\r\n                    <h2 >Power Vs Temperature</h2>\r\n                  </div>\r\n                  <div className=\"cell-body\">\r\n                    <MyChart powerArray={gpu_PowerArray} temperatureArray={gpu_TempArray}/>\r\n                  </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default MonitoringView;","C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Monitoring\\MyChart.js",[],[],"C:\\Users\\Lenovo P1\\OneDrive\\Documentos\\TEC\\Proyecto de diseño\\Nuevo Repo\\jetson-gpu-benchmarking\\WebApp\\gpu-metric-framework\\src\\components\\Monitoring\\ExecutionTime.js",[],[],{"ruleId":"228","replacedBy":"229"},{"ruleId":"230","severity":1,"message":"231","line":4,"column":8,"nodeType":"232","messageId":"233","endLine":4,"endColumn":23},{"ruleId":"230","severity":1,"message":"234","line":8,"column":8,"nodeType":"232","messageId":"233","endLine":8,"endColumn":17},{"ruleId":"230","severity":1,"message":"235","line":12,"column":11,"nodeType":"232","messageId":"233","endLine":12,"endColumn":21},{"ruleId":"230","severity":1,"message":"236","line":14,"column":11,"nodeType":"232","messageId":"233","endLine":14,"endColumn":15},{"ruleId":"230","severity":1,"message":"237","line":17,"column":12,"nodeType":"232","messageId":"233","endLine":17,"endColumn":23},{"ruleId":"238","severity":1,"message":"239","line":25,"column":12,"nodeType":"240","endLine":25,"endColumn":27,"suggestions":"241"},{"ruleId":"238","severity":1,"message":"242","line":34,"column":6,"nodeType":"240","endLine":34,"endColumn":8,"suggestions":"243"},{"ruleId":"238","severity":1,"message":"239","line":52,"column":6,"nodeType":"240","endLine":52,"endColumn":22,"suggestions":"244"},{"ruleId":"230","severity":1,"message":"245","line":8,"column":12,"nodeType":"232","messageId":"233","endLine":8,"endColumn":17},{"ruleId":"246","severity":1,"message":"247","line":47,"column":24,"nodeType":"248","messageId":"249","endLine":47,"endColumn":26},{"ruleId":"246","severity":1,"message":"247","line":54,"column":24,"nodeType":"248","messageId":"249","endLine":54,"endColumn":26},{"ruleId":"238","severity":1,"message":"239","line":61,"column":10,"nodeType":"240","endLine":61,"endColumn":44,"suggestions":"250"},{"ruleId":"246","severity":1,"message":"247","line":66,"column":26,"nodeType":"248","messageId":"249","endLine":66,"endColumn":28},{"ruleId":"246","severity":1,"message":"247","line":80,"column":26,"nodeType":"248","messageId":"249","endLine":80,"endColumn":28},{"ruleId":"230","severity":1,"message":"251","line":8,"column":12,"nodeType":"232","messageId":"233","endLine":8,"endColumn":26},{"ruleId":"246","severity":1,"message":"247","line":26,"column":21,"nodeType":"248","messageId":"249","endLine":26,"endColumn":23},{"ruleId":"246","severity":1,"message":"247","line":33,"column":21,"nodeType":"248","messageId":"249","endLine":33,"endColumn":23},{"ruleId":"246","severity":1,"message":"247","line":40,"column":26,"nodeType":"248","messageId":"249","endLine":40,"endColumn":28},{"ruleId":"238","severity":1,"message":"239","line":46,"column":10,"nodeType":"240","endLine":46,"endColumn":22,"suggestions":"252"},{"ruleId":"230","severity":1,"message":"253","line":7,"column":11,"nodeType":"232","messageId":"233","endLine":7,"endColumn":20},{"ruleId":"246","severity":1,"message":"247","line":31,"column":27,"nodeType":"248","messageId":"249","endLine":31,"endColumn":29},{"ruleId":"246","severity":1,"message":"247","line":37,"column":32,"nodeType":"248","messageId":"249","endLine":37,"endColumn":34},{"ruleId":"230","severity":1,"message":"254","line":46,"column":11,"nodeType":"232","messageId":"233","endLine":46,"endColumn":23},{"ruleId":"246","severity":1,"message":"247","line":59,"column":21,"nodeType":"248","messageId":"249","endLine":59,"endColumn":23},{"ruleId":"246","severity":1,"message":"247","line":67,"column":26,"nodeType":"248","messageId":"249","endLine":67,"endColumn":28},{"ruleId":"246","severity":1,"message":"247","line":75,"column":26,"nodeType":"248","messageId":"249","endLine":75,"endColumn":28},{"ruleId":"246","severity":1,"message":"247","line":83,"column":26,"nodeType":"248","messageId":"249","endLine":83,"endColumn":28},{"ruleId":"246","severity":1,"message":"247","line":91,"column":26,"nodeType":"248","messageId":"249","endLine":91,"endColumn":28},{"ruleId":"238","severity":1,"message":"239","line":99,"column":8,"nodeType":"240","endLine":99,"endColumn":110,"suggestions":"255"},{"ruleId":"246","severity":1,"message":"247","line":110,"column":39,"nodeType":"248","messageId":"249","endLine":110,"endColumn":41},{"ruleId":"246","severity":1,"message":"247","line":117,"column":39,"nodeType":"248","messageId":"249","endLine":117,"endColumn":41},{"ruleId":"246","severity":1,"message":"247","line":128,"column":38,"nodeType":"248","messageId":"249","endLine":128,"endColumn":40},{"ruleId":"246","severity":1,"message":"247","line":137,"column":38,"nodeType":"248","messageId":"249","endLine":137,"endColumn":40},{"ruleId":"246","severity":1,"message":"247","line":161,"column":38,"nodeType":"248","messageId":"249","endLine":161,"endColumn":40},{"ruleId":"246","severity":1,"message":"247","line":186,"column":38,"nodeType":"248","messageId":"249","endLine":186,"endColumn":40},{"ruleId":"228","replacedBy":"256"},{"ruleId":"228","replacedBy":"257"},{"ruleId":"238","severity":1,"message":"239","line":69,"column":8,"nodeType":"240","endLine":69,"endColumn":24,"suggestions":"258"},{"ruleId":"238","severity":1,"message":"242","line":34,"column":6,"nodeType":"240","endLine":34,"endColumn":8,"suggestions":"259"},{"ruleId":"246","severity":1,"message":"247","line":42,"column":22,"nodeType":"248","messageId":"249","endLine":42,"endColumn":24},{"ruleId":"238","severity":1,"message":"239","line":57,"column":6,"nodeType":"240","endLine":57,"endColumn":37,"suggestions":"260"},{"ruleId":"238","severity":1,"message":"239","line":30,"column":12,"nodeType":"240","endLine":30,"endColumn":42,"suggestions":"261"},{"ruleId":"230","severity":1,"message":"251","line":8,"column":12,"nodeType":"232","messageId":"233","endLine":8,"endColumn":26},{"ruleId":"246","severity":1,"message":"247","line":26,"column":21,"nodeType":"248","messageId":"249","endLine":26,"endColumn":23},{"ruleId":"246","severity":1,"message":"247","line":33,"column":21,"nodeType":"248","messageId":"249","endLine":33,"endColumn":23},{"ruleId":"246","severity":1,"message":"247","line":40,"column":26,"nodeType":"248","messageId":"249","endLine":40,"endColumn":28},{"ruleId":"238","severity":1,"message":"239","line":46,"column":10,"nodeType":"240","endLine":46,"endColumn":22,"suggestions":"262"},{"ruleId":"230","severity":1,"message":"245","line":8,"column":12,"nodeType":"232","messageId":"233","endLine":8,"endColumn":17},{"ruleId":"246","severity":1,"message":"247","line":52,"column":24,"nodeType":"248","messageId":"249","endLine":52,"endColumn":26},{"ruleId":"246","severity":1,"message":"247","line":59,"column":24,"nodeType":"248","messageId":"249","endLine":59,"endColumn":26},{"ruleId":"238","severity":1,"message":"239","line":66,"column":10,"nodeType":"240","endLine":66,"endColumn":59,"suggestions":"263"},{"ruleId":"246","severity":1,"message":"247","line":71,"column":26,"nodeType":"248","messageId":"249","endLine":71,"endColumn":28},{"ruleId":"246","severity":1,"message":"247","line":85,"column":26,"nodeType":"248","messageId":"249","endLine":85,"endColumn":28},{"ruleId":"246","severity":1,"message":"247","line":30,"column":27,"nodeType":"248","messageId":"249","endLine":30,"endColumn":29},{"ruleId":"246","severity":1,"message":"247","line":36,"column":32,"nodeType":"248","messageId":"249","endLine":36,"endColumn":34},{"ruleId":"230","severity":1,"message":"254","line":45,"column":11,"nodeType":"232","messageId":"233","endLine":45,"endColumn":23},{"ruleId":"246","severity":1,"message":"247","line":56,"column":23,"nodeType":"248","messageId":"249","endLine":56,"endColumn":25},{"ruleId":"246","severity":1,"message":"247","line":72,"column":21,"nodeType":"248","messageId":"249","endLine":72,"endColumn":23},{"ruleId":"246","severity":1,"message":"264","line":77,"column":23,"nodeType":"248","messageId":"249","endLine":77,"endColumn":25},{"ruleId":"246","severity":1,"message":"247","line":80,"column":26,"nodeType":"248","messageId":"249","endLine":80,"endColumn":28},{"ruleId":"246","severity":1,"message":"264","line":86,"column":17,"nodeType":"248","messageId":"249","endLine":86,"endColumn":19},{"ruleId":"246","severity":1,"message":"247","line":89,"column":26,"nodeType":"248","messageId":"249","endLine":89,"endColumn":28},{"ruleId":"246","severity":1,"message":"264","line":94,"column":18,"nodeType":"248","messageId":"249","endLine":94,"endColumn":20},{"ruleId":"246","severity":1,"message":"264","line":94,"column":34,"nodeType":"248","messageId":"249","endLine":94,"endColumn":36},{"ruleId":"246","severity":1,"message":"264","line":94,"column":47,"nodeType":"248","messageId":"249","endLine":94,"endColumn":49},{"ruleId":"246","severity":1,"message":"264","line":94,"column":59,"nodeType":"248","messageId":"249","endLine":94,"endColumn":61},{"ruleId":"246","severity":1,"message":"247","line":97,"column":26,"nodeType":"248","messageId":"249","endLine":97,"endColumn":28},{"ruleId":"246","severity":1,"message":"264","line":102,"column":18,"nodeType":"248","messageId":"249","endLine":102,"endColumn":20},{"ruleId":"246","severity":1,"message":"264","line":102,"column":34,"nodeType":"248","messageId":"249","endLine":102,"endColumn":36},{"ruleId":"246","severity":1,"message":"264","line":102,"column":46,"nodeType":"248","messageId":"249","endLine":102,"endColumn":48},{"ruleId":"246","severity":1,"message":"264","line":102,"column":58,"nodeType":"248","messageId":"249","endLine":102,"endColumn":60},{"ruleId":"246","severity":1,"message":"247","line":105,"column":26,"nodeType":"248","messageId":"249","endLine":105,"endColumn":28},{"ruleId":"246","severity":1,"message":"264","line":111,"column":23,"nodeType":"248","messageId":"249","endLine":111,"endColumn":25},{"ruleId":"246","severity":1,"message":"264","line":111,"column":44,"nodeType":"248","messageId":"249","endLine":111,"endColumn":46},{"ruleId":"238","severity":1,"message":"239","line":113,"column":8,"nodeType":"240","endLine":113,"endColumn":125,"suggestions":"265"},{"ruleId":"246","severity":1,"message":"247","line":124,"column":39,"nodeType":"248","messageId":"249","endLine":124,"endColumn":41},{"ruleId":"246","severity":1,"message":"247","line":131,"column":39,"nodeType":"248","messageId":"249","endLine":131,"endColumn":41},{"ruleId":"246","severity":1,"message":"247","line":142,"column":38,"nodeType":"248","messageId":"249","endLine":142,"endColumn":40},{"ruleId":"246","severity":1,"message":"247","line":151,"column":38,"nodeType":"248","messageId":"249","endLine":151,"endColumn":40},{"ruleId":"246","severity":1,"message":"247","line":175,"column":38,"nodeType":"248","messageId":"249","endLine":175,"endColumn":40},{"ruleId":"246","severity":1,"message":"247","line":200,"column":38,"nodeType":"248","messageId":"249","endLine":200,"endColumn":40},{"ruleId":"246","severity":1,"message":"247","line":29,"column":28,"nodeType":"248","messageId":"249","endLine":29,"endColumn":30},{"ruleId":"246","severity":1,"message":"247","line":38,"column":28,"nodeType":"248","messageId":"249","endLine":38,"endColumn":30},{"ruleId":"230","severity":1,"message":"266","line":4,"column":8,"nodeType":"232","messageId":"233","endLine":4,"endColumn":21},{"ruleId":"230","severity":1,"message":"245","line":9,"column":12,"nodeType":"232","messageId":"233","endLine":9,"endColumn":17},{"ruleId":"238","severity":1,"message":"267","line":136,"column":8,"nodeType":"240","endLine":136,"endColumn":78,"suggestions":"268"},"no-new-object",["269"],"no-unused-vars","'DynamicCheckbox' is defined but never used.","Identifier","unusedVar","'TextInput' is defined but never used.","'freqString' is assigned a value but never used.","'freq' is assigned a value but never used.","'refreshFlag' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["270"],"React Hook useEffect has a missing dependency: 'props.itemsURL'. Either include it or remove the dependency array.",["271"],["272"],"'error' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["273"],"'selectedNumber' is assigned a value but never used.",["274"],"'workloads' is assigned a value but never used.","'handleChange' is assigned a value but never used.",["275"],["269"],["269"],["276"],["277"],["278"],["279"],["280"],["281"],"Expected '!==' and instead saw '!='.",["282"],"'ExecutionTime' is defined but never used.","React Hook useEffect has missing dependencies: 'fetch_AppsInUse', 'fetch_GPUData', and 'fetch_GPUIterationsData'. Either include them or remove the dependency array.",["283"],"no-object-constructor",{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},{"desc":"296","fix":"297"},{"desc":"286","fix":"298"},{"desc":"299","fix":"300"},{"desc":"301","fix":"302"},{"desc":"292","fix":"303"},{"desc":"304","fix":"305"},{"desc":"306","fix":"307"},{"desc":"308","fix":"309"},"Update the dependencies array to be: [executionFlag, props]",{"range":"310","text":"311"},"Update the dependencies array to be: [props.itemsURL]",{"range":"312","text":"313"},"Update the dependencies array to be: [props, selectedOption]",{"range":"314","text":"315"},"Update the dependencies array to be: [props, selectedFrequency, selectedNumber]",{"range":"316","text":"317"},"Update the dependencies array to be: [inputValue, props]",{"range":"318","text":"319"},"Update the dependencies array to be: [userData, cfd_threads, niter, lambda, nc, nr, width, height, nfr, np, matrixSize, lud_threads, boxes, props]",{"range":"320","text":"321"},"Update the dependencies array to be: [MonitoringFlag, props]",{"range":"322","text":"323"},{"range":"324","text":"313"},"Update the dependencies array to be: [props, props.refresh, selectedOption]",{"range":"325","text":"326"},"Update the dependencies array to be: [props.refresh, executionFlag, props]",{"range":"327","text":"328"},{"range":"329","text":"319"},"Update the dependencies array to be: [props, props.refresh, selectedFrequency, selectedNumber]",{"range":"330","text":"331"},"Update the dependencies array to be: [props.refresh, userData, cfd_threads, niter, lambda, nc, nr, width, height, nfr, np, matrixSize, lud_threads, boxes, props]",{"range":"332","text":"333"},"Update the dependencies array to be: [props.currentAppsURL, currentApps, props.getExecState, props.gpuData, fetch_AppsInUse, fetch_GPUData, fetch_GPUIterationsData]",{"range":"334","text":"335"},[746,761],"[executionFlag, props]",[981,983],"[props.itemsURL]",[1623,1639],"[props, selectedOption]",[1708,1742],"[props, selectedFrequency, selectedNumber]",[1203,1215],"[inputValue, props]",[3020,3122],"[userData, cfd_threads, niter, lambda, nc, nr, width, height, nfr, np, matrixSize, lud_threads, boxes, props]",[1904,1920],"[MonitoringFlag, props]",[981,983],[1702,1733],"[props, props.refresh, selectedOption]",[845,875],"[props.refresh, executionFlag, props]",[1203,1215],[1822,1871],"[props, props.refresh, selectedFrequency, selectedNumber]",[3529,3646],"[props.refresh, userData, cfd_threads, niter, lambda, nc, nr, width, height, nfr, np, matrixSize, lud_threads, boxes, props]",[4232,4302],"[props.currentAppsURL, currentApps, props.getExecState, props.gpuData, fetch_AppsInUse, fetch_GPUData, fetch_GPUIterationsData]"]